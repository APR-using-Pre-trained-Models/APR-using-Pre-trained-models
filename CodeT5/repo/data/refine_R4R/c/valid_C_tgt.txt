 activityTestName = activityName + "Test"; 
 if (!SystemProperties.get("ro.com.google.locationfeatures").equals("1")) { 
 //offset, because we don't want the first 3 values in the int-array final int offset = 3; 
 static final int RADIO_TYPE_CDMA = 4; static final int RADIO_TYPE_WCDMA = 5; 
 Log.w(LOG_TAG, "Received a different registration state, " + "but don't changed the extended cdma roaming mode."); 
 static final String LOG_TAG="CDMA"; 
 // This function should be overridden by the class CDMAPhone. // It is not implemented in the class GSMPhone. Log.e(LOG_TAG, "Error! This function should never be executed, because we have an " + "inactive CDMAPhone then."); 
 mConferenceCallList = new ViewGroup[MAX_CALLERS_IN_CONFERENCE]; { 
 if (mRepeatMode != REPEAT_ONE && mPlayer.position() >= mPlayer.duration() - 1) { 
<|del|> 
 } 
 r.play(screen, (VideoView) view); 
 * <li><em>contentTypeParameters (HashMap&lt;String,String&gt;)</em> * - Any parameters associated with the content type * (decoded from the WSP Content-Type header)</li> 
 if (readContentParameters(startIndex + dataLength, (headersLength - (dataLength - mediaPrefixLength)), 0)) { 
 .setPositiveButton(android.R.string.ok, clearLogDialogListener) 
 if (!location.equalsIgnoreCase("FFFFFFFF")) { 
 String errMsg = "env var " + SERVER_PORT_ENV_VAR + //$NON-NLS-1$ ": must be >=0, got " + //$NON_NLS-1$ System.getenv(SERVER_PORT_ENV_VAR); 
 mSelectedLayout = null; 
 StaticLayout layout = getEventLayout(i, event, eventTextPaint, rf); 
import java.io.InputStream; 
 new Intent(this, AlarmService.class), 0); 
 Log.w(TAG, "Unable to create files directory " + mFilesDir.getPath()); 
<|del|> 
 String s = (!TextUtils.isEmpty(selection)) ? " where " + selection : ""; return longForQuery(db, "select count(*) from " + table + s, selectionArgs); 
 throw new BuildException(String.format( "Value for '%1$s' is not valid. It must reslove to a single path", attribute)); 
 * @param elapsedTime device reported elapsed time, in milliseconds * @param runMetrics key-value pairs reported at the end of a test run 
<|del|> 
<|del|> 
<|del|> 
 out.write(0x03); // header length out.write(0x02); // type length (2 octets) out.write(LONG_MIME_TYPE_OMA_DIRECTORY_XML >> 8); out.write(LONG_MIME_TYPE_OMA_DIRECTORY_XML & 0xFF); 
 if (mimeType.equals(WspTypeDecoder.CONTENT_TYPE_B_MMS)) { permission = "android.permission.RECEIVE_MMS"; } else { permission = "android.permission.RECEIVE_WAP_PUSH"; 
 // check if common extension was encoded i = j + 1; String extension = ExtensionEncoded(wbxmlBody[i]); if (extension != null) { emailAddress += extension; } return emailAddress; 
 * are m/s^2. The coordinate system is the same as is used by the acceleration sensor. 
 hasWifi = hasWifi || PackageManager.FEATURE_WIFI.equals(f.name); hasTelephony = hasTelephony || PackageManager.FEATURE_TELEPHONY.equals(f.name); 
 String dstStr = dst.getHostAddress(); String gwStr = (gw != null) ? gw.getHostAddress() : null; 
<|del|> 
 ActivityManagerNative.getDefault().goingToSleep(); 
 public static final String COM_ANDROID_IDE_ECLIPSE_ADT_SOURCE = 
 mProfile = Profile.ALL; 
 if (deleteRoot && wasNotEmpty && folder.members().length == 0) { 
 // we should expect to find android and an emulator adapted to the current OS. 
 * where 0 is fully transparent and 255 is fully opaque. * @param fillAlpha The alpha value of the fill, an integer in the range 0 to 255 * where 0 is fully transparent and 255 is fully opaque. 
 * Operates on the given node. 
<|del|> 
 // Trigger sending only if there are no other messages being sent right now // i.e. the queue was empty before we added this message to it 
 fail("expected IllegalAccessError exception"); } catch (IllegalAccessError e) { 
 public String getXmlText(Node xmlNode) { 
 List<ILayoutViewInfo> getChildren(); 
 // the style array is a flat array of <type, start, end> hence // the magic constant 3. 
 status.addFatalError(String.format("Failed to modify file %1$s%2$s", 
 byte[] buffer = new byte[4096]; int count; while ((count = fis.read(buffer)) != -1) { fos.write(buffer, 0, count); 
 mLog.toString()); 
<|del|> 
 onAirplaneModeChanged(); } 
<|del|> 
 // is not RINGER_MODE_NORMAL and stream is affected by ringer mode, unless // stream is routed to a wired headset. 
 public void setFocus() { mParent.setFocus(); 
 if (mSupportPanAndZoom && layer.getState() == GridLayer.STATE_FULL_SCREEN) { 
 return ""; 
 byte[] buf = result.getBytes("UTF8"); //$NON-NLS-1$ 
<|del|> 
 * Returns string to append to images directory for current ProcessorType */ public String getImagePath(String abiType); 
 * Copyright (C) 2011 The Android Open Source Project 
 public boolean hasResourcesOfType(ResourceType type) { 
 /** Helper method for {@link #findCorresponding(Element, Document)} */ private static Element findCorresponding(Element element, String targetId) { 
 mWebView.setWebChromeClient(new WebChromeClient()); 
 * WARNING: This API is under development, expect the interface to change * without notice. 
<|del|> 
 * Will copy src.length bytes. 
 * phone book or erase/format the whole phonebook 
<|del|> 
 throw new XmlPullParserException( String.format(AdtMessages.BasePullParser_Unsupported_Feature_s, name)); 
 public RenderService setLog(LayoutLog logger) { mLogger = logger; 
 * files is a .png file. Upon visiting all the delta resources, if this 
 * Copyright (C) 2011 The Android Open Source Project 
 private void callAapt(String extraPackages) { 
 assertCanBeHandled(intent); intent.setAction(android.provider.MediaStore.INTENT_ACTION_VIDEO_CAMERA); assertCanBeHandled(intent); 
 HandlerThread mInfoThread; HandlerThread mEventThread; 
 final int threshold = 1; mSame = compareTo(mBitmap, mReferenceBitmap, threshold); 
 private final static String DOT_PROPERTIES = ".properties"; //$NON-NLS-1$ 
 final long y = metrics.heightPixels/2; 
 * Copyright (C) 2012 The Android Open Source Project 
 mSettings.mProperties.store(fos, "## Settings for Android Tool"); //$NON-NLS-1$ 
 info.number = matchedNumber == null ? c.getString(CallLogQuery.NUMBER) : matchedNumber; 
 protected String cnapName; protected int cnapNamePresentation = PRESENTATION_ALLOWED; 
<|del|> 
<|del|> 
 private boolean isWindowsExecutableExtension(String extension) { 
<|del|> 
 } cachedSecureRandomService = null; for (Provider p : NoPreloadHolder.providers) { initServiceInfo(p); } needRefresh = false; 
 "for performance reasons when operating on floats. However, on modern hardware " + 
 * @param msgFormat is a string format to be used with a {@link Formatter}. Cannot be null. 
<|del|> 
 } try { mNetd.setDnsIfaceForPid(p.getInterfaceName(), pid); } catch (Exception e) { Slog.e(TAG, "exception reasseses pid dns: " + e); } 
 if (tracker.mRetryCount > 0) { 
 /** * Notifies specified registrant. 
 throw new IllegalArgumentException("directBuffer is not a direct buffer: " + directBuffer); 
 if (mDestroyed) { loge("Received message " + msg + "[" + msg.what + "] while being destroyed. Ignoring."); return; } 
 if (DBG) log("changeIccFdnPassword"); 
 public void exportImageTo(File file) { if (mImage == null || file == null) { 
 if (isUnsupported(algorithm)) { 
 * The algorithm implemented is to keep a set of (possibly overlapping) 
 IOException, XmlPullParserException { 
<|del|> 
 int curAudioMode = audioManager.getMode(); if (curAudioMode != AudioManager.MODE_RINGTONE) { 
/** * Default implementation of the AndroidSourceDirectorySet. 
 Scope.CLASS_FILE_SCOPE); 
<|del|> 
 "ManifestTypo", //$NON-NLS-1$ 
 public String shell(String cmd) { // 5000 is the default timeout from the ddmlib. // This timeout arg is needed to the backwards compatibility. 
 private Hashtable<String, HashSet<String>> mFilesToRemove = new Hashtable<String, HashSet<String>>(); 
 private final String mPlatformRootFolder; 
 private void encode(String outputFilename, int rawInputFd, 
 List<X509Certificate> duplicatedCerts = new ArrayList<X509Certificate>(certs); duplicatedCerts.add(cert2.certificate); 
 return new X509CertPathImpl(sortCertsIfNeeded(certificates), Encoding.PKI_PATH, in.getEncoded()); 
 * This method exists for compatibility and has no effect. 
import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; 
 private static final boolean DEBUG = false; 
 private final long mContext; 
<|del|> 
 if (c != leaf) { return; } 
<|del|> 
 if (map != null) { return map.get(resourceName); } } return null; 
 if ((cursor == null) || (!cursor.moveToFirst())) { if (DBG) Log.d(LOG_TAG, "onActivityResult: bad contact data, no results found."); return; } 
<|del|> 
<|del|> 
 ScriptField_hypot_f32_4_in in = new ScriptField_hypot_f32_4_in(mRS, INPUTSIZE); 
 /** List of all of the active ImageContainers that are interested in the request */ 
 private volatile boolean myProjectImportInProgress; 
<|del|> 
 case EVENT_SERVICE_STATE_CHANGED: // waiting for a special state 
 mMockDevice.executeShellCommand(expectedCmd, (IShellOutputReceiver) 
 protected LibraryBundle(@NonNull File bundle, @NonNull File bundleFolder, @Nullable String name) { 
 .showErrorDialog(project, "Unable to generate the Android GCM component for the '" + androidModule.getName() + "' module." + "The App Engine module failed to build.", "Generate App Engine Backend"); 
 if (isCompatibleVersion(sdkPath)) { 
 protected static final int EVENT_PHONE_TYPE_SWITCHED = 50; protected static final int EVENT_RADIO_POWER_FROM_CARRIER = 51; 
 List<String> pathSegments = Lists.newArrayList(gradlePath.split(SdkConstants.GRADLE_PATH_SEPARATOR)); 
 int i = percent * QUANTIZED_COLORS.length / 100; 
<|del|> 
 "To import this project into Android Studio you first need to *export* it as a Gradle project from ADT."; 
 private static File findTemplate() { File jarPath = new File(PathUtil.getJarPathForClass(AndroidGradleGcmLibGenerator.class)); 
 if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) { Log.v(TAG, "mId=" + mId); } 
<|del|> 
 showError("Method profiling: Older devices (API level < 10) are not supported yet. Please manually retrieve the file " 
 * We only care about coordinates of the following form: groupId:artifactId:revision * where revision is a series of '.' separated numbers optionally terminated by a '+' character. 
 Object value = PLUGIN_CLASSPATH.getValue(args); String s = value != null ? value.toString() : null; 
 private static Map<String, DeviceStateAtLaunch> ourLastUsedDevices = new ConcurrentHashMap<String, DeviceStateAtLaunch>(); 
 // we wait for the handshake to complete ? Writing records should be safe, but I'm not // sure if we can safely read from the stream at this point. 
 // default config_addendum is empty(""). // Some operators use "nai + additional info". // This value could set as mcc/mnc. String addendum = context.getResources().getString(R.string.config_addendum); nai = nai + addendum; 
 if (line1Key != null && line1Number != null) { if (value.indexOf(line1Key) >= 0) { value = value.replace(line1Key, line1Number); } 
 if (recursiveStrip && name.endsWith(suffix)) { return stripSuffix(name, suffix, recursiveStrip); 
 Buffer(int elementSizeShift, int capacity, long effectiveDirectAddress) { 
 * verifier signature files if they exist. 
 // "Gradle-aware Make" is only available in Android Studio. 
 if ((!protocol.equals(SUPPORTED_PROTOCOL_SSLV3)) && (!protocol.equals(SUPPORTED_PROTOCOL_TLSV1)) 
public class AarResourceClassRegistry { /** TODO: Turn this into an ApplicationComponent */ private static AarResourceClassRegistry ourInstance = new AarResourceClassRegistry(); 
 * {@linkplain AssetSetStep} is a wizard page that lets the user create a variety of density-scaled assets. 
 if (!(addr instanceof Inet4Address) && addr.isSiteLocalAddress()) { 
 mItems.add(component); 
 if (a.length < 18 || a.length == 19 || a.length > 20) { 
 * The App Engine Gradle facet type for App Engine projects with a Gradle build file 
 String term = searchTextarea.getText(); if (!term.isEmpty()) { 
 * Copyright (C) 2013 The Android Open Source Project 
 return new Repository(Type.URL, s.substring(1, s.length() - 1)); 
 public List<String> getCommandLineOptions() { if (Strings.isNullOrEmpty(COMMAND_LINE_OPTIONS)) { return Collections.emptyList(); } List<String> options = Lists.newArrayList(); 
 final long asset = ((AssetManager.AssetInputStream) is).getAssetLong(); 
 VirtualFile file = GradleUtil.getGradleBuildFile(module); if (file != null) { 
 new File(mPlatformRootFolder, "prebuilts/sdk/tools/dx"), new File(mPlatformRootFolder, "prebuilts/sdk/tools/lib/dx.jar"), 
 private static native long nativeCreate(long nativeOuterpe, long nativeInnerpe); 
 try { parser.parse(new InputSource(is), manifestHandler); } finally { Closeables.closeQuietly(is); } 
 * Copyright (C) 2014 The Android Open Source Project 
 * determine which registers hold live references to objects within the heap. 
 } else if (parser.getName().equals("calibration")) { 
 if (tmpDirName.endsWith(File.separator)) { 
 exists = existsResourceFile(module, ResourceType.LAYOUT, value); 
 public int getHandle() { if ((mHandle & 0xffffffffL) != mHandle) { throw new UnsupportedOperationException(); } 
 private List<? extends IdeaDependency> resolvedDependencies(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ideModule) { 
<|del|>
 super(os, new Deflater(Deflater.DEFAULT_COMPRESSION, true)); 
 private final File mMainManifestFile; private final ImmutableList<File> mLibraryFiles; private final ImmutableList<File> mFlavorsAndBuildTypeFiles; 
<|del|> 
 private NodeRecord(@NonNull ActionType actionType, 
 private MergingReport.Result mResult = MergingReport.Result.SUCCESS; 
 if ((r.type.equals("allow") && !canAccess) || (r.type.equals("neverallow") && canAccess)) { 
 return !isReleased && channel().isOpen(); 
 * Replaces all placeholders of the form @{name} with a tool invocation provided value 
 String str = new String(eventData, offset, strLen, Charsets.UTF_8); list.add(str); 
 if (FileUtil.getNameWithoutExtension(f).equalsIgnoreCase(name)) { 
 Environment.getDataDirectory() + "/security/current/mac_permissions.xml"; 
 int sdkErrorCount = messages.getMessageCount(FAILED_TO_SET_UP_SDK); 
 @TargetApi(17) 
 return String.format("Sources were not found for modules '%1$s'", projectsList); 
 public synchronized void clear() { 
 newConfigSpec[len] = EGLExt.EGL_OPENGL_ES3_BIT_KHR; /* EGL_OPENGL_ES3_BIT_KHR */ 
 private boolean myEnabled = true; 
 private boolean myResolved; 
<|del|> 
<|del|> 
import android.system.OsConstants; import android.system.StructPollfd; 
 Messages.showErrorDialog(project, "\'" + temp.getName() + "\" already exists", ERROR_MESSAGE_TITLE); 
<|del|> 
 private final int mNumber; 
<|del|> 
<|del|> 
<|del|> 
 error("Could not parse XML document back in for entry " + name 
 float smallFontSize = font.getSize() - 1; if (smallFontSize <= 0) { smallFontSize = font.getSize(); } Font smallerFont = font.deriveFont(smallFontSize); 
 public void addUser(User user) { 
 basePlugin.createMergeManifestsTask(variantData, "manifests"); 
 LOG.error("Could not find gradle wrapper. Command line builds may not work properly."); 
 private final Color ACTIVE_COLOR = JBColor.LIGHT_GRAY; 
 boolean gotError = false; 
 File dataFile = getProjectStateFile(project); if (!dataFile.exists()) { return false; } fin = new FileInputStream(dataFile); 
 Closeables.closeQuietly(out); 
 return Joiner.on('-').join(variant.getProductFlavors()); 
<|del|> 
 // won't be any null elements, so no null check in this block. 
import org.jetbrains.android.facet.AndroidFacet; import org.jetbrains.android.facet.ResourceFolderManager; 
 final Color bg = calcIsSelected ? ACTIVE_COLOR : UIUtil.getListBackground(); final Color fg = calcIsSelected ? UIUtil.getListSelectionForeground() : UIUtil.getListForeground(); 
<|del|> 
 private long computePresentationTime(int frameIndex) { return 132 + frameIndex * 1000000L / mFrameRate; 
 private static final Predicate<GradleCoordinate> IS_PREVIEW = new Predicate<GradleCoordinate>() { 
 final int width = getWidth(); if (width == 0) { 
 public Dominators(@NonNull Snapshot snapshot, @NonNull ImmutableList<Instance> topSort) { mSnapshot = snapshot; mTopSort = topSort; 
<|del|> 
 public static boolean isShowingMenu(@SuppressWarnings("UnusedParameters") @Nullable RenderContext context) { 
 if (localreceiver != null) { 
 /** * This is a set of functions in java.Math/StrictMath that take two inputs. * These functions will call run2InputTest; others will call runTest. */ 
 private boolean parse3339Internal(String s) { 
 assertTrue("Test requires build-tools 20.0.0", aapt.isFile()); 
 public void syncSucceeded(@NotNull Project project) { 
 // Falling thru with a secondary, it will be treated as a regular left aligned button. 
 throw new IllegalArgumentException("Invalid reply length"); 
 mainToolBar.addAction(action, new Constraints(Anchor.LAST, null)). 
 stopBatching(); 
<|del|> 
 String clientSecret, String clientId, String refreshToken) { 
 final Set<PsiFile> files = Sets.newHashSetWithExpectedSize(items.length); 
<|del|> 
<|del|> 
 return UnsignedBytes.toInt(mInput.readByte()); 
 mDeviceInfo &= ~DEVICE_TYPE; 
 ImmutableList.Builder<ModuleTemplate> galleryTemplates = ImmutableList.builder(); ImmutableList.Builder<ModuleTemplate> extrasTemplates = ImmutableList.builder(); 
<|del|> 
@Ignore("Tree") 
 private static enum CacheState { UNPOPULATED, FETCHING, POPULATED } 
 public final boolean isSameType(@Nonnull JType type) { 
 public boolean getEmergencyStatus() 
 public void requireHaveRenderError(@NotNull String error) { 
<|del|> 
 return String.format("%1$s and %2$s", getLabels(Iterables.limit(locales, size - 1)), getLabel(Iterables.get(locales, size - 1))); 
 runApplication("Run", appName); } @NotNull public ChooseDeviceDialogFixture findChooseDeviceDialog() { 
 Arrays.sort(clients, new ClientCellRenderer.ClientComparator()); 
 /** Are previously-abstract methods all overridden? */ 
<|del|> 
 setBackground(backgroundNonSelectionColor); 
 public static FullRevision getResolvedAndroidGradleModelVersion(@NotNull final Project project) { 
 if (titles.isEmpty()) { 
 compilerState.addHierarchyUsage(currentFileName, usedTypeFileName); 
 for (String category : sample.getCategories()) { if (category != null && StringUtil.containsIgnoreCase(category, keyword)) { filteredSamples.add(sample); break; // done searching categories 
 return IconLoader.getIcon(String.format("/icons/versions/%1$s.png", codename), AndroidIcons.class); 
 * Implementation of LanguageSourceSet for Android's sources. 
 selectApp(appName); findActionButtonByActionId("Debug").click(); 
 return String.format(Locale.getDefault(), "%1$d MB", size.getSizeAsUnit(Storage.Unit.MiB)); 
<|del|> 
 int[] vs2 = values; 
 * Asserts that a domain, if it exists, is only running the listed executables. 
 throw new MarkerNotConformException("Schedulable '" + name + "' cannot have two @" 
 private ApiVersion mMinSdkVersion; private ApiVersion mTargetSdkVersion; private Integer mMaxSdkVersion; private Integer mRenderscriptTargetApi; 
 private XmlFile getAppEngineXmlFile(@NotNull String fileName) { 
 return fileName.endsWith(".zip") || fileName.endsWith(".jar"); 
 warningResult = ValidationResult.warn(ValidationResult.Message.NON_ASCII_CHARS); 
 throw new NotBinaryException(v.getLocation().getDescription() + " is not a binary"); 
 @Override @Nullable 
 myNewBuild = in.readUTF(); isBinary = in.readBoolean(); isStrict = in.readBoolean(); 
<|del|> 
 libraryProperties.put(KEY_JAYCE_MAJOR_VERSION, JAYCE_MAJOR_VERSION); libraryProperties.put(KEY_JAYCE_MINOR_VERSION, JAYCE_MINOR_VERSION); 
 return Action.NAME.equals(key) ? myText : null; 
 public void testDuckTypingSucceedsWhenAllMethodsPresentWithDifferentButCompatibleReturnTypes() throws Exception { assertNotNull(DuckTypedPSKKeyManager.getInstance( new KeyManagerOfferingAllPSKKeyManagerMethodsWithCompatibleReturnTypes())); 
 return location.getDescription() + " is an invalid library: " + super.getMessage(); 
 sysLog.log(Level.SEVERE, "Failed to parse the property " + JayceProperties.KEY_JAYCE_MINOR_VERSION + " from " + inputLibrary.getLocation().getDescription(), e); 
<|del|> 
<|del|> 
<|del|> 
<|del|> 
 assertSSLSocketFactoryConfigSameAsSSLContext(sslContext.getSocketFactory(), sslContext); assertSSLServerSocketFactoryConfigSameAsSSLContext(sslContext.getServerSocketFactory(), sslContext); 
 * Kept for compatibility with the gradle integration, this method just forwards to 
 * Shows a dialog that has one entry value which is a GCP project using the project selector. * The title and ok button text is passed into the constructor. 
 List<InstallableComponent> components = Lists.newArrayList(); 
 * Shows a dialog that has one entry value which is a GCP project using the project selector. * The title and ok button text is passed into the constructor. 
<|del|> 
 public void check() { 
 set.add(Variant.valueOf(reader.nextString().toUpperCase())); // Note that the following checks that we are at the end of the array. 
 boolean usingIO() { 
 String jdkPath = myState.get(myPathKey); // Don't overwrite any non-zero value by an automatically detected path if (!Strings.isNullOrEmpty(jdkPath)) { myState.put(myPathKey, path); } 
 String pid = Files.toString(f, Charsets.UTF_8); 
 if (orientation != null) { state.put(DEFAULT_ORIENTATION_KEY, ScreenOrientation.getByShortDisplayName(orientation)); 
 // Allow the navigation bar to move on non-square small devices (phones). mNavigationBarCanMove = width != height && shortSizeDp < 600; 
 setPreferredSize(new Dimension(Math.max(MIN_WIDTH, preferredWidth), getPreferredPopupHeight())); 
 String propertyName = Splitter.on('/').limit(2).splitToList(item.getValue()).get(1); 
 return new ValidationInfo("You must specify a style name", myStyleNameTextField); 
 * Class that provides method to resolve themes for a given configuration. 
<|del|> 
 public List<CategorizedProblem> getExtraProblems() { 
 public void testParameterAnnotationRemoverNpe() throws Exception { 
<|del|> 
 public void crunchPng(@NonNull final File from, @NonNull final File to) throws PngException { 
 if (keepAnnotated) { keepAnnotated(path); } 
 assert fragment != null : sourceXml + " failed to parse"; 
 assertThat(extractContentAsByte(path)).named(path).isEqualTo(content); 
 * An {@link InputOutputVDir} implementation for a {@link GenericInputOutputVFS}. 
 myAtomTreeRoot = root; 
 return vfs.getRootDir(); 
 if (fromContext != null) { 
 if (!myShouldStopContextSwitch.get() && contextId.equals(myCurrentContext)) { 
 @NotNull private ImageInfoId myImageInfoId; private ImageInfo myImageInfo; private Binary myBinary; 
<|del|> 
 if (!closed) { 
 return Collections.singletonList(new TextPiece(myAtomGroup.getName(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)); 
<|del|> 
<|del|> 
 // STOPSHIP: There is a problem with this assertion, likely due to PrefixedFS that has a close() 
 mySubStyleLabel.setVisible(false); myStyleEditor.setDetailsActive(true); 
 /** * @hide */ public static String getRelativeTimeSpanString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, int flags, boolean capitalize) { 
 // In order to use the runner layout ui, the runner infrastructure needs to be initialized. 
 OsConstants.CAP_BLOCK_SUSPEND, 
 if (!StringUtil.isEmpty(value) && Character.isLetter(value.charAt(0))) { return value; 
<|del|> 
 File rootDirPath = new File(toSystemDependentName(getProjectBasePath(project))); 
 // entries (unless they trigger the checks below). 
 @Nonnull 
 private final int nlPortId; 
 sample(acquired); 
 // Exclude jar files that are in "jars" folder in "build" folder. 
 Api01Config setProguardConfigFiles(@Nonnull List<File> proguardConfigFiles) throws ConfigurationException; 
 Api01Config setResourceImportCollisionPolicy( @Nonnull CollisionPolicy resourceImportCollisionPolicy) throws ConfigurationException; 
 return 0; 
<|del|> 
 public List<ValueDescription> getValueDescriptions() { 
 fail("Invalid catch location: expected null but got " + dumpLocation(catchLocation)); 
 public int run() throws Exception { 
<|del|> 
 "must-revalidate, max-age=86400, stale-while-revalidate=604800"); 
 public short sll_protocol; 
 String warningText = warningTextBuilder.toString(); if (!warningText.isEmpty()) { warningTextBuilder.insert(0, "<html>"); warningTextBuilder.append("</html>"); myWarningMessage.setText(warningTextBuilder.toString()); 
 * Sets jar file to apply the Jill translation onto. The file must exist. * @param input jar file to translate 
 } 
 } if (!foundBootART) { fail("expected to find boot.art"); } bufReader.close(); reader.close(); ins.close(); 
 protected WithLocationException(@Nonnull Location location, @CheckForNull Throwable cause) { 
 /// CHECK-DAG: <<Mul:j\d+>> Mul [<<Arg>>,<<Const128>>] 
<|del|> 
<|del|> 
 dumpMemInfo(fd.getFileDescriptor(), mi, checkin, dumpInfo, dumpDalvik, dumpSummaryOnly, args); 
 /* The wrapped ICU implementation. Non-final for #clone() */ 
 // check and print methods info 
 Thread.yield(); 
 private JAnnotationType defaultAnnotationType; 
final class TransactionAbortError extends InternalError { 
 * it the specified parameters are inappropriate for this * cipher. 
 return fmtter.format(scal, ecal, new StringBuffer(), new FieldPosition(0)).toString(); 
 int regularFontSize = getFontMetrics(regularFont).getHeight(); myHeaderFont = regularFont.deriveFont(regularFontSize * HEADER_FONT_SCALE); 
 myMinimumPluginVersion = myCheckGradleVersion ? PreciseRevision.parseRevision("1.2.0") : null; 
 myValue = resValue.getValue(); 
 returnedComponent.setFont(font); 
 if (generator != null) { registerSyncListenerIfNecessary(); 
 assertEquals("" + "AndroidManifest.xml:28: Warning: At least one android:scheme attribute should be set for the intent filter [AppIndexing]\n" 
<|del|> 
 createActionLabel(GctBundle.message("appengine.sdk.gradle.install"), new Runnable() { 
 if (myTreeTable.isTreeColumn(i)) { 
 if (StringUtil.equalsIgnoreCase(colorValue, colorName)) { colorElement.setStringValue(newValue); 
 public UpdatablePkgInfo getPkg() { return myPkg; } public SelectedState getState() { return myState; } public void setState(SelectedState state) { myState = state; } 
 super(GctBundle.getString("clouddebug.stopandcontinue"), GctBundle.getString("clouddebug.exitdebug"), GoogleCloudToolsIcons.CLOUD_DEBUGSAVEEXIT); 
 * @return The waitToken for use during serialization. 
 StringBuilder result = new StringBuilder(folder.getName()); 
import com.google.common.collect.ImmutableMap; 
 for (int i = 0; i < ResourceResolver.MAX_RESOURCE_INDIRECTION; i++) { 
 private ArrayList<SvgNode> mChildren = new ArrayList<SvgNode>(); 
 public JdkOrderEntry findAndroidSdkEntryForFile(@NotNull VirtualFile file) { 
 * Check if the usage of App Indexing is correct. 
 "Missing data node?"); 
 metaVar = "<FILE>") 
 * 2) The selected run config is a cloud debugger runconfig. * 
 return "Verbosity level '" + verbosity.name().toLowerCase() + "' is deprecated"; 
 public interface ZipEntryExtractor { 
 public boolean setAccepted(@Nullable File sdkRoot) { if (sdkRoot == null) { return false; } 
<|del|> 
 private volatile List<Breakpoint> myCurrentServerBreakpointList = ImmutableList.of(); private Debugger myCloudDebuggerClient; 
<|del|> 
 /*instance =*/ null, methodCall.getReceiverType(), idReplacement, methodCall.getType(), /*isVirtualDispatch =*/ false); 
 assertDesiredMinimum(new Point(w, min.y / 2), min); 
<|del|> 
<|del|> 
 public void unitTestingSupport() throws IOException { 
 int pid = getPid(p); if (pid <= 0) { throw new RuntimeException("Couldn't parse process"); } 
 return session != null && session.mKeyUpCount > 0; 
 type.getSession().getReporter().report(Severity.NON_FATAL, 
<|del|> 
 builder.append(stringChars); 
 public ImmutableList<Breakpoint> getCurrentServerBreakpointList() { 
 task.setCoverageDir(scope.getGlobalScope().getProject().file(rootLocation + subFolder)); 
 writeDebugEnd(currentClass, currentLine); 
 // protected void onMeasure(int x, int y) {a = 1;} 
 * Retrieves the current NFCID2 for the specified service. 
 KEYGUARD_LOCK_AFTER_DELAY_DEFAULT, currentUserId); 
 * @param context The context object to be used for getting content resolver 
 synchronized (mWaitLock) { mCallback.reset(); 
<|del|> 
 new ModelPath(COMPONENTS), 
 private final double[] CEIL_DOUBLES = new double[] { 
 private PsiFileAndLineNavigation[] getTargetFiles() { 
 } outputOffset += NativeCrypto.EVP_CipherUpdate(cipherCtx, output, outputOffset, input, inputOffset, inputLen); calledUpdate = true; return outputOffset - intialOutputOffset; 
 enableThemeEditor(); 
 * Copyright (C) 2015 The Android Open Source Project 
public class Version implements Comparable<Version> { 
 final int displayId = w.getDisplayId(); 
<|del|> 
 if (!StringUtil.isEmpty(predefinedName)) { 
 public boolean checkEntry(String archivePath) throws ZipAbortException { 
 JBPopup popup = JBPopupFactory.getInstance().createListPopupBuilder(list) 
<|del|> 
 @NotNull ResourceType resourceType, @Nullable String predefinedName, @Nullable String predefinedValue, boolean chooseName, @Nullable VirtualFile defaultFile) { 
 void launchDebug(@NotNull Client client); 
<|del|> 
 mContext.report(UNIQUE, scope, location, message); 
 // TODO alias to openDrawer before 3.0 and deprecate this method. 
 if (myScreenshotTaker != null) { SimpleDateFormat format = new SimpleDateFormat("MM-dd-yyyy.HH:mm:ss"); String now = format.format(new GregorianCalendar().getTime()); 
 String badText = "("; name.enterText(badText); String text = name.text(); assertNotNull(text); assertTrue(text.endsWith(badText)); 
 private static final String[] HOST_JARS = new String[] { "core-libart-hostdex", 
 return null; 
 else if (MaterialColors.PRIMARY_DARK_MATERIAL.equals(attributeName)) { 
 * A path is a collection of one or more steps, and wizards contain one or more paths. Furthermore, * different wizards may share (their own instances of) the same path class. 
 return (T) ThreadRecorder.get().record(executionType, block, mergedProperties); 
 Size maxPreviewSize = getMaxPreviewSize(context, cameraId); 
 final Module contextModule = ModuleUtil.findModuleForPsiElement(reference); 
 public static final int CURRENT_MINOR = 0; 
<|del|> 
<|del|> 
<|del|> 
 } 
 LocalVarCreator localVarCreator = new LocalVarCreator(syntheticSwitchMapInitializer, "loc"); 
 logger.log(Level.SEVERE, "Exception during IO", e); 
 myAttributesSorter.setSortKeys(ImmutableList.of(new RowSorter.SortKey(0, SortOrder.ASCENDING))); 
 */ @Deprecated 
<|del|> 
 if (mUserMangaer.hasUserRestriction(UserManager.DISALLOW_OUTGOING_BEAM)) { 
 return country == null ? language.toLowerCase(Locale.US) : language.toLowerCase(Locale.US) + "-" + country.toLowerCase(Locale.US); 
 DumbService.getInstance(myContext.getProject()).showDumbModeNotification(DUMB_MODE_MESSAGE); 
 myModel = (AttributesTableModel)table.getModel(); 
<|del|> 
 int numInstancesToShow = getNumInstancesToShow(query, insts.size()); 
 Assert.assertEquals(Integer.numberOfLeadingZeros(1 << (Integer.SIZE-1)), 0); Assert.assertEquals(Integer.numberOfLeadingZeros($noinline$return_int_zero()), Integer.SIZE); 
<|del|> 
 latch.await(); return createCapture(captureHandle); } 
 mHasLiveTvFeature = hasDeviceFeature(FEATURE_LIVE_TV); 
 private static final String HARDWARE_FEATURE_TOUCHSCREEN = "android.hardware.touchscreen"; //$NON-NLS-1$ 
 link.append(" \"%s", initialCharsOf(stringValue, "\"", "...")); 
 byte c; 
 * Copyright (C) 2015 The Android Open Source Project 
 public OpenSSLX509Certificate withDeletedExtension(String oid) { 
 Dex.Section[] dexSections = new Dex.Section[dexes.length]; 
<|del|> 
<|del|> 
 hasValidCountry = isValidBcp47Alpha(country, 2, 2) // Alpha 3 (ISO 3166-1) || isUnM49AreaCode(country) // Digit 3 (UN M.49) || country.length() == 0; 
 /// CHECK-START: int Main.whole_switch_dead(int) dead_code_elimination_final (after) /// CHECK-NOT: PackedSwitch public static int whole_switch_dead(int j) { 
 run(DEFAULTMETHOD014); 
 output[0] = (byte) (size >>> 8); output[1] = (byte) size; 
 private Field contextSSLParameters; 
 out.annotate(" debug info not available (imported)"); 
 if (one.getCategory() == 2 && ((i != 0) || !one.isClosure())) { 
<|del|> 
 getText(R.string.usb_use_charging_only), getText(R.string.usb_use_file_transfers), getText(R.string.usb_use_photo_transfers) }; mFunctions = new String[] { null, UsbManager.USB_FUNCTION_MTP, UsbManager.USB_FUNCTION_PTP }; 
 certificates.add((X509Certificate) cert); indexLocal.index((X509Certificate) cert); 
 * Whether this domain includes subdomains. 
 * Creates a Runner for JUnit 3 or JUnit 4 tests. 
 boolean seenTrustAnchors = false; boolean defaultOverridePins = configType == CONFIG_DEBUG; 
 // If we see the same certificate in two TrustAnchors, one with overridesPins and one // without, the one with overridesPins wins. 
<|del|> 
 } else { 
 // Add path to system libraries to libPaths; // Access to system libs should be limited // to bundled applications libPaths.add(System.getProperty("java.library.path")); 
 if (mConfigSource != null) { return mConfigSource; 
 if (!new File(mDir, fileName).exists()) { 
 // Returns true if the device has network location feature. 
<|del|> 
 * Returns {@code true} cleartext traffic is permitted for this application when connecting to * {@code hostname}. 
 * Get the Stride of raw data associated with this 2D Allocation. 
 System.out.println(LEGACY_COMPILER_KEY + ".version = " + getReferenceCompilerVersion()); 
@Description("Always check assert statements") 
 WaitForClients wfc = new WaitForClients(device, timeout); 
<|del|> 
 throw new Error("Expected to fail"); } catch (ReflectiveOperationException e) { 
 // Lower out-of-bounds on x. 
 // Prevent HSelect simplification by having a branch with multiple instructions. System.nanoTime(); 
 sb.append("<message/>"); sb.append("\n"); 
 public static void main(String[] args) { inlineLoop(); inlineWithinLoop(); 
 CipherSpiAndProvider sap = new CipherSpiAndProvider( (CipherSpi) service.newInstance(null), service.getProvider()); 
<|del|> 
 + "'. Unset jack prebuilt property in configuration file"); 
 * Sets the base directory all relative paths will be based on. 
 * The default human-readable reporter. 
 private void addCreateDexJarAndPushTasks( Set<Task> tasks, String name, File jar, Action action) { 
 SSLSession cachedSession = super.getSession(sessionId); if (cachedSession != null) { // This will already have gone through Platform#wrapSSLSession return cachedSession; 
 * Copyright (C) 2015 The Android Open Source Project 
 // Create a folder for resources. 
 packet.setNextValueAsInt(1); // number of modifiers. 
 c = Class.forName( packageName + "ObjectReference.InvokeMethodDefault002Debuggee$TestClass"); 
 File libDexFolder = AbstractTestTools.createTempDir(); 
 assertEquals("Invalid long value", longVal, expectedValue); 
 * Copyright (C) 2016 The Android Open Source Project 
<|del|> 
 String.format("improper test case: adjusted test duration (%d) <= batchUs (%d)", 
 // Repackage lib1 File lib1Jarjar; 
 } catch (SecurityException expected) { 
 + "' existing: " + existingNode.getClass().getName() + ", new: " + (newNode == null ? "<null>" : "of class " + newNode.getClass().getName())); 
<|del|> 
<|del|> 
 } 
 rs.nContextSetCacheDir(RenderScript.getCachePath()); 
 Assume.assumeTrue(jackOutputFile.setReadable(false)); 
 if (!(e.getCause() instanceof NullPointerException)) { throw new Error("Expected NullPointerException"); } 
 AbstractTestTools.getCandidateToolchain(JackBasedToolchain.class, excludeClazz); 
 // because one test relies on the contents of this array to be consistent. 
<|del|> 
 String name; boolean foundName; 
 * Copyright (C) 2016 The Android Open Source Project 
 public static final int MAJOR = 2; 
@RunWith(AndroidJUnit4.class) public class RepeatActionUntilViewStateIntegrationTest { 
 // Notify by correct subId. 
 * The Keeper puts markers on the IR outside of the class or interface it runs on, which * necessitates for the shrinkers to wait for the Keeper to finish visiting all types before using * the markers. 
 try { assertTrue(HasBackgroundMatcher.compareBitmaps(bitmap, bitmap)); } finally { bitmap.recycle(); bitmap = null; } 
 byte bytesToWrite[] = { 
 return mInterceptingActivityFactory.shouldIntercept(cl, className, intent) ? mInterceptingActivityFactory.create(cl, className, intent) : super.newActivity(cl, className, intent); 
<|del|> 
 import android.app.Instrumentation; import android.support.test.runner.AndroidJUnit4; import android.support.test.uiautomator.By; import android.support.test.uiautomator.UiDevice; import android.support.test.uiautomator.UiObject; import android.support.test.uiautomator.UiSelector; 
@Transform(add = {JBlock.class, JCatchBlock.class, JExpressionStatement.class, JLocal.class, JMethodCall.class, JThrowStatement.class, JTryStatement.class}) 
<|del|> 
 private final JClass lockClass; private final JClass requestClass; private final JClass resetClass; private final JMethodIdWide requestMethodId; private final JMethodIdWide resetMethodId; 
 assertNotNull(asc.getRemoteAddress()); assertEquals(attachment, connectCompletionHandler.getAttachment()); 
 @CheckForNull private final JClass lockClass; @CheckForNull private final JClass requestClass; @CheckForNull private final JClass resetClass; @CheckForNull private final JMethodIdWide requestMethodId; @CheckForNull private final JMethodIdWide resetMethodId; 
<|del|> 
<|del|> 
 } while (foundName); 
 private final Location location; 
<|del|> 
 adapter.closeProfileProxy(BluetoothProfile.PAN, mBluetoothPan.get()); mBluetoothPan.set(null); 
 if (call.getReceiverType() != constructor.getEnclosingType()) { 
 // This should be ignored as Suites are processed first. 
 ControlFlowGraph cfg = constructor.getMarker(ControlFlowGraph.class); assert cfg != null; return cfg; 
 * by using a key derivation function. 
 public abstract boolean isTypeValue(); 
 long byteBufferAddress = NIOAccess.getBasePointer(directByteBuffer); long charBufferAddress = NIOAccess.getBasePointer(charBuffer); 
 getPhantomLookup 
 visitor.request.commit(); 
 Rops.opXor(sources), unarySrcPos, destReg, sources, CstBoolean.make(true))); 
 * Returns the consolidated single value. Note that the value may be null. 
<|del|> 
public class TextTypeAndMemberWriter { 
 * Show all the system apps. * For API >= 23, clicks "Show system" text option from the "More options" drop down, * for APIs <= 22 scrolls to the last tab to select the "All" option. 
 int globalA1 = invokeGetGlobal(testA1Class); 
 long maxValue = (Long.MAX_VALUE / NANOS_PER_MILLI); if (delayMillis > maxValue) { delayMillis = maxValue; 
 src, local.makeRef(src), 
 Field resultCodeField = Activity.class.getDeclaredField(FIELD_RESULT_CODE); 
 toolchain = AbstractTestTools.getCandidateToolchain(); 
 if (!isDst || dstAmount != 0) { 
 // TODO(JUnit4.10) - because JUnit 4.10 has no separation of display name and unique method 
<|del|> 
 extension = extension.toLowerCase(Locale.US); 
 getMenu().add(0, MENU_DIAL, 0, getString(R.string.menu_dial)); 
 .addDefaultValue(Boolean.TRUE) 
 "jack.jayce-to-nnode.structure.skipped", "Type structure reading skipped by the reader", 
 tr.append(new AppendBefore(candidate.callSiteStmt, new JExpressionStatement(src, new JAsgOperation(src, local.makeRef(src), arg)))); 
 this.pathList = new DexPathList(this, dexPath, librarySearchPath, optimizedDirectory); 
 pbeps.getParameterSpec()); 
 SourceInfo si = create(startLine, endLine, fileName); 
 provAndParam.provider.put(provAndParam.operationParameters.first, provAndParam.operationParameters.second); 
 Decoder basicDecoder = Base64.getDecoder(); // uses Table 1 // Check failure cases common to both RFC4648 Table 1 and Table 2 decoding. checkDecoder_extraChars_common(basicDecoder); 
 private static void checkRoundTrip_wrapInputStream(Encoder encoder, Decoder decoder) 
 StringResource stringResource = getStringResource(key); 
<|del|> 
 myString = string; 
 public final String getType(@Nonnegative int columnIdx) { 
 // or vice versa but that is checked in libcore tests. 
 bestMatch = match; break; 
 /// CHECK-NEXT: cmp [<<BaseReg:\w+>> + 8], e<<IndexReg:\w+>> 
 * ephemeral networks are allowed * @param scoreCache score cache for WiFi networks 
 ArrayList<NetworkKey> unscoredNetworks = new ArrayList<>(); 
<|del|> 
<|del|> 
 public static Boolean[] wrapArray(@NonNull boolean[] array) { 
 receivingQueues.add(r.queue); 
<|del|> 
 public Locales(Locale uncategorizedLocale, Locale displayLocale, Locale formatLocale) { this.uncategorizedLocale = uncategorizedLocale; 
 // REMIND: perform conservative isInstance check here? 
 final String s1 = "Hello"; final String s2 = "World"; 
 statement = updateCatchBlockList(new JGoto(info, returnTarget), returnStmt); 
@Description("Marker instruct Jack to inline a specific method.") 
 return getDelay(ConfigFile.SHUTDOWN_PROPERTY, CONFIG_TIME_DISABLED_VALUE); 
 // Android-changed: The upstream version of this function returns KeySetView (See http://b/28099367). 
 TestSSLContext testSSLContext = TestSSLContext.create(); 
 public String getSmsAddress() { return smsAddress; } 
 for (int i = 0; i < expectedMap.size(); ++i) { final Map.Entry<Integer, String> e = entries[i]; assertEquals(expectedMap.get(e.getKey()), e.getValue()); 
public class MediaController { public android.media.session.MediaController mDelegate; public android.media.session.MediaController.TransportControls mTransportDelegate; public TransportControls mTransportControls; 
 private void checkAccessRight(@Nonnull File file) throws IOException { FileAccess fileAccess = FileAccess.get(file.toPath()); 
 if (!(thatObject instanceof UserCredential)) { 
 @GuardedBy("mLock") 
 try (GZIPOutputStream gzipOutputStream = new GZIPOutputStream(zipOutputStream)) { gzipOutputStream.write(data); 
 System.out.println(getHotnessCounter(c, "errMethod")); 
 protected class SetupAllocationCopyTests { 
<|del|> 
<|del|> 
<|del|> 
<|del|> 
 dataFormat >= IFD_FORMAT_BYTES_PER_FORMAT.length || numberOfComponents < 0) { 
 .command(commandPath("/bin/sleep"), "5") // in seconds 
<|del|> 
 Provider mockProvider = new MockProvider(); Security.addProvider(mockProvider); try { Cipher cipher = Cipher.getInstance("GrowingOutputSize", mockProvider); 
 // engineGetOutputSize returns 512+1, engineUpdate expects buf >= 513 
 private final @NonNull Context mContext; 
 public static final int MATCH_NONE = 0; public static final int MATCH_PRIMARY = 1; public static final int MATCH_SECONDARY = 2; 
 public void test_closeGuardSupport_open_without_append() throws IOException { 
 // The instructions vary in size, so we have to find the last instruction in the block in a // few tries. 
 mCurrent.start(job -> { mCurrent = null; startNextJob(); 
 mMainHandler.post(() -> allPrintersLost()); 
<|del|> 
 if (lock == null) { 
 assertActiveNetworkMetered(false); // Sanity check. return true; 
 public void notifySimActivationStateChangedForPhoneId(int phoneId, int subId, int activationType, int activationState) { if (!checkNotifyPermission("notifySimActivationState()")){ 
 for (TracerBrush brush : brushes) { brush.endTraceSeed(field); 
 public WifiAwareNative(boolean doRegistration) { 
 public static final int LINK_STATUS_MASK = (1 << 0 | 1 << 1); 
 private final BasicLruCache<String, ZoneRules> cache = new ZoneRulesCache(8); 
 private static ApplicationInfo getApplicationInfo(Context context) { 
 serverThread.join(1000); 
 mRecommendedNetwork = null; mNotificationBadgeBitmap = null; 
 /** * implement Parcelable interface * |flags| is ignored. * */ 
 final Runnable mShowFailedToConnectNotificationRunnable = () -> { showFailedToConnectNotification(); }; 
 Rlog.e(TAG, "NumberFormatException(string: " + idx + " config:" + config + "): " + e); 
 public static final int WIFI_FEATURE_TRANSMIT_POWER = 0x400000; // Capture transmit power 
 } if (sa != null) { 
 mTetherMasterSM.sendMessage(TetherMasterSM.CMD_TETHER_MODE_UNREQUESTED, who); 
 private void tetherMatchingInterfaces(boolean enable, int interfaceType) { if (VDBG) Log.d(TAG, "tetherMatchingInterfaces(" + enable + ", " + interfaceType + ")"); 
<|del|> 
 = FormattedFloatingDecimal.valueOf(value, prec, FormattedFloatingDecimal.Form.SCIENTIFIC); 
 public SimChangeListener(Context ctx, Handler handler, Runnable onSimCardLoadedCallback) { 
 * Register an InterfaceDestroyedListener to the specified iface - returns true on success 
 @ @param p2 P2 paramter (described in ISO 7816-4). Default value: 0x00 
 mKey = in.createByteArray(); 
 // of the handle itself, except in the cases enumerated below. 
 private static final Set<String> ALL_ALGOS = new HashSet<>( 
 public class InnerClass { 
 try (FileInputStream fis = new FileInputStream(tmpFile)) { try (FileChannel fc = fis.getChannel()) { 
 mService = checkNotNull(service, "missing NetworkManagementService"); 
 public void loadComponentsInStaMode() throws Exception { 
 private ISupplicant mISupplicant; private ISupplicantStaIface mISupplicantStaIface; 
 debugLog("aclStateChangeCallback: State:Disconnected to device:" + device); 
 return api == API_NO_EXTENDED_OPCODES || api == API_CURRENT; 
 if (line == null || line.length == 0) return null; return new String(line, "UTF-8"); 
<|del|> 
 IOException ioException = new IOException(); DirectoryIteratorException exception = new DirectoryIteratorException(ioException); 
 List<WifiConfiguration> networkList = getTestNetworksConfig(false /* shared */); 
 System.out.println( "ERROR: Memory mapping for " + CLASS_PATH + " is unexpectedly dirty"); 
<|del|> 
<|del|> 
<|del|> 
<|del|> 
 if (mSlotId == slotId && feature == mSupportedFeature) { 
 private static final String TAG = "IpSecTransform"; 
 final TestNetworkCallback cellNetworkCallback = new TestNetworkCallback(); 
public class FileSystemsTest { 
 * The method creates a custom classloader for the mock FileSystem and FileSystemProvider * classes. The custom classloader is created by providing filesystemtest.jar which contains 
 if (mRfcommSocket == null || mL2capSocket == null || sdpManager != null) { Log.e(TAG, "mRfcommSocket :" + mRfcommSocket + " mL2capSocket :" + mL2capSocket + " sdp manager :" + sdpManager); 
 * IpSec traffic will be encapsulated within UDP as per <a * href="https://tools.ietf.org/html/rfc3948">RFC3498</a>. 
<|del|> 
 throw new IllegalArgumentException("opcode with invalid branchingness: " + opcode.getBranchingness()); 
 * IPsec operates at the IP layer, this 32-bit identifier uniquely identifies packets to a * given destination address. 
 certCredential.setCertType(Credential.CertificateCredential.CERT_TYPE_X509V3); 
 mLog.err("% returns %") 
 } NativeCrypto.SSL_write(s, fd, callback, new byte[] {42}, 0, 1, 0); 
 verify(mWifiVendorHal.mVerboseLog, never()).trace(eq("% filter length %")); 
public class Operation implements Serializable{ private static final long serialVersionUID = 6913785969226335666L; 
 private static final long serialVersionUID = -4770898797492929173L; /** * */ 
<|del|> 
 logger.error("compare failed"+ex); 
<|del|>
 public MLPUserNotifPref getUserNotificationPreference(Long userNotifPrefID) { return this.usrNotifPrefById; 
<|del|> 
 logger.debug("-------------- constructService() started ---------------"); 
<|del|> 
 logger.error(EELFLoggerDelegator.errorLogger, " Exception in deleteNode() ", e); throw new ServiceException("Failed to Delete the Node", props.getSolutionErrorCode(), "Failed to Delete the Node"); 
<|del|> 
 log.info(EELFLoggerDelegate.debugLogger, "testSolutionRevisionArtifacts: {}", response.getBody()); log.info(EELFLoggerDelegate.debugLogger, "testSolutionRevisionArtifacts: {}", response); 
<|del|> 
 @ApiModelProperty(required = true, value = "Millisec since the Epoch", example = "1521202458867") 
 JsonResponse<MLPPeer> result = gatewayController.pingGateway(request, "ggre34gsd", response); Assert.assertNotNull(result); 
 log.info("inside finallly callOnboarding ---->>>"); 
 mlpNotification.setMsgSeverityCode("LO"); 
<|del|> 
 logger.debug("mLNotification.getNotificationId() "+mLNotification.getNotificationId()); 
 } catch (Exception e) { logger.error(EELFLoggerDelegator.errorLogger, "No environment configuration found!!", e); 
 logger.debug(EELFLoggerDelegator.debugLogger,"mapData : Begin"); 
 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); out.write((new Result(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage()).toString()).getBytes()); 
 notification.setTitle(NOTIFICATION_TITLE); 
 // Databroker will have only 1 operation. this can be changed. 
<|del|> 
<|del|> 
 @Column(name = "ACCESS_TYPE_CD", nullable = false, columnDefinition = "CHAR(2)") 
 * This method will get the Private DSModels 
 /** * @author sg453d * */ 
<|del|> 
<|del|> 
 log.error("Exception in PublisherImpl:attempt():Unexpected error during publish attempt " + e.getMessage()); 
 * @param authorization * authorization header details 
<|del|> 
 logger.warn("addPeerToGroup: failed on peer ID {}", peerId); 
<|del|> 
 @Column(name = "KERNEL_TYPE_CD", nullable = false, columnDefinition = "CHAR(2)") @NotNull(message = "Kernel type cannot be null") 
<|del|> 
 LicenseWorkflow workflowVal = LicenseWorkflow.valueOf(workflow.toLowerCase()); switch (workflowVal) { case download: 
 * Copyright (C) 2019 AT&T Intellectual Property & Tech Mahindra. All rights reserved. 
<|del|> 
 * Copyright (C) 2019 AT&T Intellectual Property & Tech Mahindra. All rights reserved. 
public interface ILicenseVerification { 
<|del|> 
 private static final String JSONSCHEMANAME = "/license.schema.json"; 
 } 
 private HttpServletRequest request; 
public class ClientConfig { 
 private static Process invoke(String... args) throws Exception { 
 noc = new NetworkOutputChannel(ccb, nBuffers); 
 * 
 InsertDeleteOperator insertOp = new InsertDeleteOperator(targetDatasource, varRef, 
 } 
 for (int i = 0; i < inputs.size(); i++) { 
<|del|> 
 } if (pos == -1) { throw new AlgebricksException("An exception occurred when finding the position of the indexed field -" + field); } 
<|del|> 
 mdTxnCtx = MetadataManager.INSTANCE.beginTransaction(); bActiveTxn = true; metadataProvider.setMetadataTxnContext(mdTxnCtx); 
 throw new AlgebricksException("'Interval' type unsupported for CSV output"); 
 throw new HyracksDataException( "A numeric type promotion error has occurred before doing hash(). Can't continue process. Detailed Error message:" 
 private static void valueSanitycheck(ATypeTag sourceType, ATypeTag targetType, double sourceValue) throws AlgebricksException { 
<|del|> 
 markAsValidInternal(invIndexComponent.getDeletedKeysBTree(), force); 
 public void merge(ILSMIndexOperationContext ctx, ILSMIOOperation operation) throws HyracksDataException, IndexException; 
 public void markAsValid(ILSMComponent lsmComponent) throws HyracksDataException { 
<|del|> 
<|del|> 
 return getFieldCount() * FrameConstants.SIZE_LEN; 
 int schemeFieldCount = recordAccessor.getSchemeFieldCount(recType); for (int i = 0; i < schemeFieldCount; ++i) { 
<|del|> 
 boolean die = false; while (!die) { 
 //For LOJ with GroupBy, prepare objects to reset LOJ nullPlaceHolderVariable in GroupByOp 
 NCFileSystemAdapter.addCandidateFile(child, expression, files); 
 public static ReplicationRequestType getRequestType(SocketChannel socketChannel, ByteBuffer byteBuffer) 
 lsmComponentRemoteLSN2LocalLSNMappingTaskQ = new LinkedBlockingQueue<LSMComponentLSNSyncTask>(); lsmComponentId2PropertiesMap = new ConcurrentHashMap<String, LSMComponentProperties>(); localLSN2RemoteLSNMap = new ConcurrentHashMap<Long, RemoteLogMapping>(); lsmComponentLSNMappingService = new LSMComponentsSyncService(); 
<|del|> 
 InsertOperator insertOp = (InsertOperator) op; if (!insertOp.isBulkload()) throw new AlgebricksException("Bulkload operation is expected"); 
 while (buffer.hasRemaining()) { fileChannel.write(buffer); } 
<|del|> 
 public boolean isSingle(); 
<|del|> 
 if (c.confiscated() || c.pinCount.get() != 0 || 
<|del|> 
 boolean isEqual = deepEqualAssessor.isEqual(pointableLeft, pointableRight); 
 public void getUnqiueId(String nodeId) throws Exception { CCNCFunctions.GetUniqueIdFunction gridf = new CCNCFunctions.GetUniqueIdFunction(nodeId); 
 * While the {@link IFrameWriter} is in the OPENED state, the producer can call one of: 
<|del|> 
 } catch (Throwable th) { throw new HyracksDataException(th); 
 public void sendApplicationMessageToNC(byte[] data, DeploymentId deploymentId, String nodeId) throws Exception; 
 reponse.setException(new Exception("Cannot generate global resource id when cluster is not active.")); 
 * 
 host = "127.0.0.1"; port = 19002; 
 return ExternalDataUtils.isDataSourceStreamProvider(configuration) ? DataSourceType.STREAM : DataSourceType.RECORDS; 
 //If any datatype uses this type, throw an error //TODO: Currently this loads all types into memory. This will need to be fixed for large numbers of types 
<|del|> 
 * or more contributor license agreements. See the NOTICE file 
 * with the License. You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * 
 FrameUtils.appendToWriter(writer, partialAppender, fta, i); 
 return name.equalsIgnoreCase(PersistentLocalResourceRepository.METADATA_FILE_NAME) || !name.startsWith("."); 
 appender.flush(writer); 
<|del|> 
 * non-primitive type in the object model 
 sb.append("ExceptionWhenDeserialzingField "); 
 inputSideHandler.flush(); 
 break; case TIME: 
 throw new AsterixException("Unspecified format parameter for socket adapter"); 
 return this == ATypeTag.RECORD || this == ATypeTag.ORDEREDLIST || this == ATypeTag.UNORDEREDLIST || this == ATypeTag.UNION; 
 final IPointable argPtr0 = new VoidPointable(); final IPointable argPtr1 = new VoidPointable(); 
 // Skip constant folding for the record-related functions. if (funcIDSetThatShouldNotBeApplied.contains(expr.getFunctionIdentifier())) { 
 "Unspecified (\"reader\" or \"format\") parameter for local filesystem adapter"); 
 // if caching is enabled, and we got to here then we know that the 
 System.arraycopy(buffer, 0, buffer, 1, buffer.length - 1); buffer[0] = previousCharacter; 
 * 
 ISerializedAggregateEvaluatorFactory[] merges = new ISerializedAggregateEvaluatorFactory[n]; 
 GeneratedRunFileReader(FileReference file, IIOManager ioManager, long size, boolean deleteAfterRead, 
 private ExternalGroupState state; private boolean isFailed = false; 
 if (tupleCount > 0) { 
 // if op is binary, but not associative or commutative, disallow splitting 
 * 
 "This record is closed, you can not add extra fields! new field name: " + fldName); 
 protected static File getLibraryUninstallDir() { 
 private String defaultFeedType; 
 sb.append("Failed to deserialize field" + j); 
<|del|> 
 IBinaryTokenizerFactory queryTokenizerFactory = InvertedIndexAccessMethod .getBinaryTokenizerFactory(searchModifierType, searchKeyType, secondaryIndex); 
 int partition, int ioDeviceNum) throws HyracksDataException { List<IVirtualBufferCache> virtualBufferCaches = runtimeContextProvider.getVirtualBufferCaches(datasetID, ioDeviceNum); 
 public AlgebricksAbsolutePartitionConstraint getPartitionConstraint() { 
 this.metaKeyAccessExpressions = metaKeyAccessExpressions; 
 FeedCollectOperatorDescriptor feedCollector = new FeedCollectOperatorDescriptor(jobSpec, feedConnectionId, 
 super(opDesc, ctx, partition, null, mergePolicy, opTrackerFactory, ioScheduler, ioOpCallbackFactory, null, null, null, durable); 
 private final LinkedList<Path> dirs; 
 try { DataOutputStream wr = new DataOutputStream(connection.getOutputStream()); wr.writeBytes(urlParameters); wr.close(); } catch (Exception e) { throw new AsterixException("Broker connection failed to write", e); } 
 Set<String> locs = new TreeSet<>(); 
 ILSMIndexAccessor accessor = index.createAccessor(NoOpOperationCallback.INSTANCE, 
<|del|>
 public static final long NILL = -1L; 
<|del|> 
<|del|> 
 ICachedPage rootNode = bufferCache.pin(BufferedFileHandle.getDiskPageId(fileId, rootPage), false, largePageHelper); 
 return "ConcurrentFramePool [" + nodeId + "]" + "(consumed:" + handedOut + "/" + budget + ")"; 
 LOGGER.info("Producer is waking up consumer"); 
 notifyMemoryConsumer(); 
<|del|> 
 cause = e; 
 private final static byte MISSING_BYTE = ATypeTag.SERIALIZED_MISSING_TYPE_TAG; 
<|del|> 
 case INT16: 
 default: throw new NotImplementedException(ERR_MSG + tag2); 
 @FunctionalInterface 
 while (++i <= max && source[i] != first); 
 private static void writeMissing(DataOutput out) throws HyracksDataException { // do nothing 
 * @param strippedInputTypes, 
 byte serializedTypeTag = data[start]; if (serializedTypeTag == ATypeTag.SERIALIZED_MISSING_TYPE_TAG) { 
 ps.print(AInt32SerializerDeserializer.getInt(b, s + 1)); 
<|del|> 
 private static final byte CERTAIN = 1; private static final byte NULLABLE = 2; private static final byte MISSABLE = 4; private static final byte MISSING = 8; private static final byte NULL = 16; 
 final IPredicateEvaluator predEvaluator = predEvaluatorFactory == null ? null : predEvaluatorFactory.createPredicateEvaluator(); 
 public static final IPrinter PRINTER = (byte[] b, int s, int l, PrintStream ps) -> { ps.print("{ \"interval\": { \"start\": "); 
 public static final IPrinter PRINTER = (byte[] b, int s, int l, PrintStream ps) -> ps .print(AFloatSerializerDeserializer.getFloat(b, s + 1) + "f"); 
 //add the size of the log record itself + 4 bytes for its size 
 Thread.currentThread().interrupt(); } catch (Exception e) { if (LOGGER.isLoggable(Level.SEVERE)) { LOGGER.log(Level.SEVERE, "Unexpected exception during LSN synchronization", e); } 
 syncCommitQ = new LinkedBlockingQueue<>(logPageSize / ILogRecord.JOB_TERMINATE_LOG_SIZE); flushQ = new LinkedBlockingQueue<>(); remoteJobsQ = new LinkedBlockingQueue<>(); 
<|del|> 
import org.apache.asterix.experiment.builder.AbstractExperimentBuilder; import org.apache.asterix.experiment.builder.PerfTestAggBuilder; 
 private static final FunctionInfoRepository registeredFunctions = new FunctionInfoRepository(); 
 public Boolean visitLeftOuterUnnestOperator(LeftOuterUnnestOperator op, ILogicalOperator arg) throws AlgebricksException { 
 throw new UnsupportedOperationException(ERR_MSG); 
 Pair<IFileSplitProvider, AlgebricksPartitionConstraint> splitsAndConstraint = splitProviderAndPartitionConstraintsForDataset(dataSource.getId().getDataverseName(), datasetName, indexName, temp); 
 * 
 validate = true; 
 void appendLastParsedPrimaryKeyToTuple(ArrayTupleBuilder tb) throws IOException; 
<|del|> 
 Pair<IFileSplitProvider, AlgebricksPartitionConstraint> indexSplitsAndConstraint = metadataProvider.splitProviderAndPartitionConstraintsForDataset(ds.getDataverseName(), ds.getDatasetName(), index.getIndexName(), temp); 
 private List<Set<LogicalVariable>> previousPK = new ArrayList<>(); 
 if (bytes.hasRemaining()) { bytes.compact(); position -= bytes.position(); } else { bytes.clear(); } 
 + (((long) (bytes[offset + 6] & 0xff)) << 8) + (bytes[offset + 7] & 0xff); 
 primaryIndexComparatorFactories[j] = AqlBinaryComparatorFactoryProvider.INSTANCE.getBinaryComparatorFactory(primaryKeyTypes[j], true); 
 this.format = (format == null) ? NonTaggedDataFormat.class.getName() : format; 
 @Option(name = "-messaging-public-port", usage = "Public IP port to announce messaging listener" + " (default: same as -messaging-port; must set -messaging-public-port also)", required = false) 
 List<String> computeLocations = new ArrayList<>(); 
 printField(pw, ErrorField.MSG.str(), JSONUtil.escape(msg != null ? msg : e.getClass().getSimpleName()), addStack); 
 int partition) throws IOException { 
 ((AbstractFunctionCallExpression) currExpr).getArguments().add(new MutableObject<>(e)); c.getArguments().add(new MutableObject<>(currExpr)); 
 out.print(" as " + name); 
 if (producedVars.contains(pk)) { 
<|del|> 
 if (obj.isNull(curFNames[iter1])) { if (curRecType.isClosedField(curFNames[iter1])) { throw new HyracksDataException("Closed field " + curFNames[iter1] + " has null value."); } else { 
<|del|> 
 * 
 className = typeComputerName; } 
 case RECTANGLE: 
<|del|> 
 * 
 return getFlatNode(type1); } 
 * 
<|del|> 
 super(namespace, asterixFunction, FunctionKind.SCALAR, argumentTypes, returnType, rtc, body, language, initParas); 
 leafOperator.getInputs().add(new MutableObject<>(insertOp)); 
 private void merge(BufferedWriter writer, Pair<String, String> baseBlocks, String[] extensions) 
import static org.apache.asterix.api.http.servlet.ServletConstants.HYRACKS_CONNECTION_ATTR; import static org.apache.asterix.api.http.servlet.ServletConstants.HYRACKS_DATASET_ATTR; 
 public synchronized void close() { 
 fieldPrinter.print(b, s, l, ps); } 
 * 
 * 
 public LocalResource createLocalResource(long resourceId, String resourceName, int partition, int storageVersion, String resourcePath) { return new LocalResource(resourceId, resourceName, partition, resourcePath, LocalResource.TransientResource, storageVersion, null); 
 ia.setIndexExpr(visit(ia.getIndexExpr(), arg)); 
 // Default type StorageUtil.StorageUnit unitType; 
 List<List<String>> aldsPartitioningKeys = alds.getPartitioningKeys(); boolean isAldsPKAutoGenerated = ((InternalDatasetDetails) alds.getTargetDataset().getDatasetDetails()) .isAutogenerated(); 
 private ILogicalOperator translateUpsert(Query expr, DatasetDataSource targetDatasource, Mutable<ILogicalExpression> varRef, List<Mutable<ILogicalExpression>> varRefsForLoading, 
 return aString; 
 isOpen = subType.isOpen(); 
 FeedRuntimeType connectionLocation; 
 + "Is the server configuration correct (node names, buffer sizes, framesize)? " + "Check the logfiles for more details."); 
 List<String> additionalFilteringField, LogicalVariable unnestVar, ProjectOperator project, ArrayList<Mutable<ILogicalExpression>> exprs, LogicalVariable resVar, AssignOperator additionalFilteringAssign) throws AlgebricksException { if (!targetDatasource.getDataset().allow(project,Dataset.UPSERT)) { 
 public static final List<IAlgebraicRewriteRule> buildAccessMethodRuleCollection() { List<IAlgebraicRewriteRule> accessMethod = new LinkedList<>(); 
 return new ArrayList<>(Arrays.asList(sourceVar.equals(metaVar) ? metaType.getFieldNames()[fieldIndex] : recordType.getFieldNames()[fieldIndex])); 
 Mutable<ILogicalExpression> varRef = new MutableObject<>(new VariableReferenceExpression(resVar)); ILogicalOperator leafOperator; 
 ((AbstractFunctionCallExpression) currExpr).getArguments().add(new MutableObject<>(e)); f.getArguments().add(new MutableObject<>(currExpr)); 
 case AND: 
 return (fce.getKind() == FunctionKind.UNNEST) ? expr : new UnnestingFunctionCallExpression( FunctionUtil.getFunctionInfo(AsterixBuiltinFunctions.SCAN_COLLECTION), argRefs); default: 
 } if (hde != null) { throw hde; } 
 public static final FunctionIdentifier TYPE_OF = new FunctionIdentifier(FunctionConstants.ASTERIX_NS, "type-of", 1); public static final FunctionIdentifier GET_HANDLE = new FunctionIdentifier(FunctionConstants.ASTERIX_NS, 
 replicas = new HashMap<>(); jobCommitAcks = new ConcurrentHashMap<>(); replicationJobsPendingAcks = new ConcurrentHashMap<>(); shuttingDownReplicaIds = new HashSet<>(); 
 Thread.currentThread().interrupt(); 
 } catch (AsynchronousCloseException e) { if (LOGGER.isLoggable(Level.INFO)) { LOGGER.log(Level.INFO, "Replication listener stopped for remote replica: " + replicaId, e); } } catch (IOException e) { handleReplicationFailure(replicaSocket, e); 
 private final List<List<LogicalVariable>> correlatedNullableVariableLists = new ArrayList<>(); 
 return (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, tIx1, accessorBuild, tIx2); 
<|del|> 
 MetadataProvider queryMetadataProvider, Query rwQ, int varCounter, String outputDatasetName, 
 if (projection.star()) { 
 void configure(List<Pair<String, String>> args); 
<|del|> 
 private transient IBinaryTokenizer tokenizerForLeftArray = null; private transient IBinaryTokenizer tokenizerForRightArray = null; 
<|del|> 
 } finally { 
 jsonAPIServer = new Server(externalProperties.getAPIServerPort()); 
 public static final FunctionIdentifier EDIT_DISTANCE_STRING_CONTAINS = new FunctionIdentifier( FunctionConstants.ASTERIX_NS, "edit-distance-string-contains", 3); 
 protected void handleCreateFeedStatement(AqlMetadataProvider metadataProvider, Statement stmt) throws Exception { 
 Pair<IFileSplitProvider, AlgebricksPartitionConstraint> splitsAndConstraint = splitProviderAndPartitionConstraintsForDataset( 
 private transient MetadataTupleTranslatorProvider tupleTranslatorProvider; 
 private ISerializerDeserializer<AInt64> int64Serde = AqlSerializerDeserializerProvider.INSTANCE .getSerializerDeserializer(BuiltinType.AINT64); 
<|del|> 
 return new IScalarEvaluatorFactory() { private static final long serialVersionUID = 1L; 
 @SuppressWarnings("squid:S1166") // Either log or rethrow this exception public static void readRecords(String fileName, List<int[]> records, List<Integer> rids) throws IOException { 
<|del|> 
 return new String[0]; 
 Set<String> participantNodes = new HashSet<>(); 
 int numberOfHeaderFrame = (int) ((double) tableSize * 2 / (double) frameSize); int numberOfContentFrame = (int) (((double) getNumberOfEntryInSlot() * 2 * getUnitSize() * tableSize) / (double) frameSize); 
 } catch (IllegalArgumentException e) { //NOSONAR - exception not logged or rethrown response.sendError(HttpServletResponse.SC_NOT_FOUND); 
 private static int INVALID_VALUE = 0xFFFFFFFF; private static byte INVALID_BYTE_VALUE = (byte) 0xFF; private double garbageCollectionThreshold; 
 this.inbox = new LinkedBlockingQueue<>(); 
 case GROUP: 
 public void takeThreadDump(String requestId) throws Exception; 
<|del|> 
 " out: ([record-before-upsert:" + op.getPrevRecordVar() + ((op.getPrevAdditionalNonFilteringVars() != null) ? (", additional-before-upsert: " + op.getPrevAdditionalNonFilteringVars()) : "") 
 public void stopCluster(boolean terminateNCService) throws Exception { 
 return new RunAQLFileAction(httpClient, restHost, restPort, localExperimentRoot.resolve(LSMExperimentConstants.AQL_DIR).resolve("8_compact.aql")); 
 if (!functionDecls.isEmpty()) { 
 public static void serialize(OutputStream out, Object object) throws IOException { 
 private IntSerDeBuffer[] headers; 
 public static List<ExternalFile> getSnapshotFromExternalFileSystem(Dataset dataset) throws AlgebricksException { List<ExternalFile> files = new ArrayList<>(); 
public class DataverseOperations { private DataverseOperations() { throw new AssertionError("This class should not be initialized."); } 
 public static JobSpecification buildIndexUpdateOp(Index index, List<ExternalFile> metadataFiles, List<ExternalFile> addedFiles, List<ExternalFile> appendedFiles, AqlMetadataProvider metadataProvider) throws AlgebricksException { 
<|del|> 
 String strMetaItemTypeName = getMetaItemTypeName().getValue(); 
 throws AsterixException { 
 for (Entry<TypeSignature, List<TypeSignature>> typeEntry : incompleteTopLevelTypeReferences.entrySet()) { TypeSignature typeSignature = typeEntry.getKey(); 
 runInParallel((op, index) -> { if (startedInitialization[index]) { op.deinitialize(); } }); 
<|del|> 
 if (connectFeedStmt.getAppliedFunctions() != null) { 
 public void dropFeedConnection(String dataverseName, String feedName, String datasetName) { FeedConnection feedConnection = new FeedConnection(dataverseName, feedName, datasetName, null, null, null); 
 return new XMLFileParser(recordType, new ADMDataParser(recordType, ExternalDataUtils .getDataSourceType(configuration).equals(IExternalDataSourceFactory.DataSourceType.STREAM))); 
 public boolean acceptExpressionTransform(ILogicalExpressionReferenceTransform transform) throws AlgebricksException { 
<|del|> 
 if (j != exprAndVarIdx.second) { 
 Collection<LogicalVariable> vars = (g.getPreferredOrderEnforcer() != null) ? g.getPreferredOrderEnforcer() : g.getColumnSet(); 
 ConstantExpression constExpr = (ConstantExpression) thresholdConstantExpr; 
 eval = args[0].createScalarEvaluator(context); 
 return Math.abs(leftVal - rightVal) < 1E-10; 
 case DOUBLE: 
 throw new TypeMismatchException(getIdentifier(), 1, tag1, 
 eval.evaluate(tuple, inputVal); 
 String subscriptionLocation, MetadataProvider metadataProvider, FeedPolicyEntity feedPolicy, 
public class ExceptionUtil { private ExceptionUtil() { } 
 break; case NOTIFY_DEPLOY_BINARY: 
<|del|> 
 double rightVal = ATypeHierarchy.getDoubleValue(DEEP_EQUAL, 1, rightPointable.getByteArray(), 
 public int getPageSizeWithHeader() { 
 public int selectVictimPartition(int failedToInsertPartition) { 
 return spillPolicy.selectVictimPartition(partition); 
<|del|> 
 public static JobSpecification buildStartFeedJob(MetadataProvider metadataProvider, Feed feed, List<FeedConnection> feedConnections, ILangCompilationProvider compilationProvider, DefaultStatementExecutorFactory qtFactory, IHyracksClientConnection hcc) throws Exception { 
 List<DatasetResource> datasetsResources = new ArrayList<>(datasets.values()); Collections.sort(datasetsResources); for (DatasetResource dsr : datasetsResources) { PrimaryIndexOperationTracker opTracker = dsr.getOpTracker(); 
<|del|> 
 throws HyracksDataException; 
 writer.close(); 
 ManagedFileSplit[] ordersSplits = new ManagedFileSplit[] { new ManagedFileSplit(NC2_ID, "data" + File.separator + "tpch0.001" + File.separator + "orders.tbl") }; 
 FileReference rTreeFileRef = ioManager.resolveAbsolutePath(rTreeFile.getAbsolutePath()); FileReference bTreeFileRef = ioManager.resolveAbsolutePath(bTreeFile.getAbsolutePath()); FileReference bloomFilterFileRef = ioManager.resolveAbsolutePath(bloomFilterFile.getAbsolutePath()); 
 "data" + File.separator + "tpch0.001" + File.separator + "customer.tbl"); 
 FileSplit[] splits = new FileSplit[] { new ManagedFileSplit(NC2_ID, "data" + File.separator + "words.txt") }; 
 FileSplit[] custSplits = new FileSplit[] { new ManagedFileSplit(NC1_ID, "data" + File.separator 
 default: 
 case DAYTIMEDURATION: 
 case INT8: 
 private static final IBinaryTokenizerFactory aqlHashingStringTokenizer = new DelimitedUTF8StringBinaryTokenizerFactory(true, true, 
<|del|> 
 private StartJobFunction(DeploymentId deploymentId, byte[] acggfBytes, Set<JobFlag> jobFlags, JobId jobId) { 
 while ((subTreeOp.getOperatorTag() == LogicalOperatorTag.ASSIGN || subTreeOp.getOperatorTag() == LogicalOperatorTag.UNNEST)) { 
<|del|> 
<|del|> 
 ncs.removeActivityClusterGraph(jobId); 
 throw new RuntimeDataException( ErrorCode.ERROR_OPERATORS_FEED_MSG_OPERATOR_NODE_PUSHABLE_INVALID_SUBSCRIBABLE_RUNTIME, 
 final PersistentLocalResourceRepository localResourceRepository = (PersistentLocalResourceRepository) txnSubsystem.getAsterixAppRuntimeContextProvider().getLocalResourceRepository(); 
 * @return The LSN byte offset in the LSM disk component if the index is valid, * otherwise {@link IMetadataPageManager#INVALID_LSN_OFFSET}. 
 ICachedPage rootNode = bufferCache.pin(BufferedFileHandle.getDiskPageId(fileId, rootPage), true, largePageHelper); 
 Thread.currentThread().interrupt(); 
 IMetadataPageManager metadataPageManager = (IMetadataPageManager) invIndexComponent.getDeletedKeysBTree() .getPageManager(); 
 } else { 
 if (returnExpression != null) { 
<|del|> 
 private T1 first; private T2 second; 
 private void setup(List<FunctionDecl> declaredFunctions, IReturningStatement topStatement, MetadataProvider metadataProvider, LangRewritingContext context) { this.topStatement = topStatement; 
<|del|> 
 gc.set("name", gcNames.get(i)); gc.set("collection-time", ((ArrayNode)gcCollectionTimes.get(i)).get(index)); gc.set("collection-count", ((ArrayNode)gcCollectionCounts.get(i)).get(index)); 
 if (json != null) { 
 jan.set("outputs", jOutputs); 
<|del|> 
<|del|> 
 public static final DefaultJobResourceController INSTANCE = new DefaultJobResourceController(); 
<|del|> 
 LOGGER.log(Level.INFO, output + ": unsupported output-format, using " + OutputFormat.CLEAN_JSON + " instead", e); 
 public static final Map<String, double[][]> boundingBoxes = initializeBoundingBoxes(); 
 * We compute the transitive closure of this (producer-consumer) relation to find the largest set of * tasks that need to be co-scheduled. 
 LOGGER.log(Level.SEVERE, e.getMessage(), e); 
 Collection<LogicalVariable> currentPKs = new HashSet<>(); currentPKs.addAll(leftInputPKs); currentPKs.addAll(rightInputPKs); 
 throw new CompilationException(ErrorCode.PARSE_ERROR); 
 modificationCallbackPrimaryKeyFields, getStorageComponentProvider().transactionSubsystemProvider(), indexOp, ResourceType.LSM_BTREE) 
 public void setFeedLogManager(FeedLogManager feedLogManager) { // do nothing 
 defaultLogicalRewrites .add(new Pair<>(seqFirstRuleGateKeeperDfs, RuleCollections.buildFuzzyJoinRuleCollection())); 
 private Mutable<ILogicalExpression> getSimilarityExpression(Mutable<ILogicalExpression> exprRef) { ILogicalExpression exp = exprRef.getValue(); 
 public static final List<List<String>> RECORD_ID_FIELDS; 
 int[] filterFields; int[] rtreeFields; 
 return !datasetName.concat(IndexingConstants.EXTERNAL_FILE_INDEX_NAME_SUFFIX).equals(indexName); 
<|del|> 
 // Step 5. Bind the plan to the parent op referred by the following opRef. 
 List<JobRun> pull(); 
 public void setId(String s) { // unused 
 private static final List<String> recordReaderNames = Collections.unmodifiableList(Arrays.asList( ExternalDataConstants.READER_TWITTER_PULL, ExternalDataConstants.READER_TWITTER_PUSH, ExternalDataConstants.READER_PUSH_TWITTER, ExternalDataConstants.READER_PULL_TWITTER, ExternalDataConstants.READER_USER_STREAM_TWITTER)); 
 IIndexDataflowHelperFactory filesIndexDataflowHelperFactory, IndexInfoOperatorDescriptor fileIndexesInfo, List<IIndexDataflowHelperFactory> indexesDataflowHelperFactories, List<IndexInfoOperatorDescriptor> indexesInfos) { super(spec, filesIndexDataflowHelperFactory, fileIndexesInfo, indexesDataflowHelperFactories, indexesInfos); 
 ILangCompilationProvider compilationProvider, IStatementExecutorFactory statementExecutorFactory, IComponentProvider componentProvider) { 
 printStatus(resultWriter, ResultDelivery.ASYNC == delivery ? ResultStatus.STARTED : ResultStatus.SUCCESS); 
 IStorageManager storageManager, IIndexLifecycleManagerProvider lifecycleManagerProvider, 
 * @return the file map provider {@link org.apache.hyracks.storage.common.file.IFileMapProvider} 
 metadataProvider.getStorageComponentProvider().getIndexLifecycleManagerProvider(), splitsAndConstraint.first, dataflowHelperFactory, metadataProvider.getStorageComponentProvider().getMetadataPageManagerFactory()); 
 List<IDiskComponent> reversedImmutableComponents = 
import org.apache.hyracks.storage.am.lsm.common.api.ILSMDiskComponentFactory; 
 public void afterOperation(LSMOperationType opType, List<ILSMComponent> oldComponents, ILSMDiskComponent newComponent) throws HyracksDataException { 
 * Gets the edit distance value for the given two sequences using a Dynamic Programming approach. 
<|del|> 
 public void notify(ActiveEvent event) { // do nothing 
 case Servlets.AQL: 
 messagingNetManager = new MessagingNetworkManager(this, ncConfig.messagingListenAddress, ncConfig.messagingListenPort, ncConfig.netThreadCount, ncConfig.messagingPublicAddress, ncConfig.messagingPublicPort, appCtx.getMessagingChannelInterfaceFactory()); 
 int digit = serString[offset] - '0'; if (value < limit + digit) 
 queryWebServer.addServlet(new QueryWebInterfaceServlet(queryWebServer.ctx(), new String[] { "/*" })); 
 clientIPC = new IPCSystem(new InetSocketAddress(ccConfig.clientListenAddress, ccConfig.clientListenPort), ciIPCI, new JavaSerializationBasedPayloadSerializerDeserializer()); 
 throw e; 
 } return null; 
 switch (this) { case ADDRESS: return "Default IP Address to bind listeners on this NC. All services will bind on this address " + "unless a service-specific listen address is supplied."; 
 ncConfig2.iodevices = new String [] { joinPath(System.getProperty("user.dir"), "target", "data", "device1") }; 
 protected boolean[] allocatedFrames; protected boolean failed = false; 
 ObjectNode invoke(String host, String servletPath, String[] arguments) throws Exception; 
 System.err.println("XXX RState open " + toString()); 
 RecordDescriptor recordDescriptor, ITuplePartitionComputer tpc) throws HyracksDataException { this.ctx = ctx; this.tpc = tpc; 
<|del|> 
 executor.execute(new Runnable() { 
 debugTrace("closeAndDelete " + toString()); 
 debugTrace("nextFrame " + toString()); 
 private final DatasetId datasetId; 
<|del|> 
 return om.writer(new MinimalPrettyPrinter()).writeValueAsString(on); } catch (JsonProcessingException e) { // NOSONAR 
 public Date() { // do nothing 
 TypeUtil.createEnforcedType(recordType, metaType, Collections.singletonList(index)); 
<|del|> 
 List<IInvertedListCursor> cursorsOrderedByTokens) throws HyracksDataException { 
 } catch (HyracksDataException e) { 
 throws MetadataException, RemoteException { 
 public void fail() throws HyracksDataException { 
 public void fail() throws HyracksDataException { 
 ISerializableTable table = new SerializableHashTable(tableSize, ctx, bufferManager); 
 if (opId == null) { opId = jobSpec.createOperatorDescriptorId(opDesc); } 
 if (opId == null) { opId = jobSpec.createOperatorDescriptorId(opDesc); } 
 return new DiagnosticsApiServlet(ctx, paths, appCtx); 
 public Pair<ITupleReference, ITupleReference> insertIntTuples(IIndexTestContext ctx, int numTuples, boolean filtered, Random rnd) throws Exception { 
 writer.close(); 
 if (rwQ != null || (statement != null && statement.getKind() == Statement.Kind.LOAD)) { LogicalOperatorPrettyPrintVisitor pvisitor = new LogicalOperatorPrettyPrintVisitor(conf.out()); PlanPrettyPrinter.printPlan(plan, pvisitor, 0); 
 if (th instanceof HyracksDataException) { if (((HyracksDataException) th).getErrorCode() == ErrorCode.RECORD_READER_MALFORMED_INPUT_STREAM) { 
 case VARIABLE: { 
 throw new IOException("Can't convert integer types. The source type should be one of " + "tinyint/smallint/integer/bigint."); 
 ioOpCallbackFactory.createIoOpCallback(), buddyBtreeFields, -1, true, metadataPageManagerFactory, partition()); 
 public IndexBulkLoadOperatorNodePushable(IIndexDataflowHelperFactory indexDataflowHelperFactory, IHyracksTaskContext ctx, int partition, int[] fieldPermutation, float fillFactor, boolean verifyInput, long numElementsHint, boolean checkIfEmptyIndex, RecordDescriptor recDesc) throws HyracksDataException { 
 return new AbstractUnaryStringStringEval(ctx, args[0], GetRuntimeContextVariableDescriptor.this.getIdentifier()) { private byte[] result; 
<|del|> 
 if (configKey.length() > 0 && !configuration.containsKey(configKey)) { 
 msg = rootCause.getClass().getSimpleName() + (msg == null ? "" : ": " + msg); 
 MetadataTransactionContext mdTxnCtx = metadataProvider.getMetadataTxnContext(); 
 HttpUtil.setContentType(response, HttpUtil.ContentType.APPLICATION_JSON, HttpUtil.Encoding.UTF8); 
 firstSearcher.waitUntilEntered(); 
 public static Map<InetAddress, Set<String>> getForcedNodeControllerMap(ICcApplicationContext appCtx) { 
 //this is used when we flush an in-memory rtree into disk //and insert anti-matter tuples from in-memory buddy btree into disk rtree 
 this.ctx = rtree.createOpContext(modificationCallback, nonIndexFields); 
 merger.waitUntilCount(1); 
 firstFlusher.waitUntilCount(1); 
<|del|> 
 } catch (Exception e) { flushWriter.fail(); throw e; 
 private RTreeOpContext createOpContext(IModificationOperationCallback modificationCallback, int[] nonIndexFields) { return new RTreeOpContext((IRTreeLeafFrame) leafFrameFactory.createFrame(), (IRTreeInteriorFrame) interiorFrameFactory.createFrame(), freePageManager, cmpFactories, modificationCallback, nonIndexFields); } 
 }); 
 // Method signature enforced by IPersistedResourceRegistry for deserializiation public static IJsonSerializable fromJson(IPersistedResourceRegistry registry, JsonNode json) { //NOSONAR 
 // Method signature enforced by IPersistedResourceRegistry for deserializiation public static IJsonSerializable fromJson(IPersistedResourceRegistry registry, JsonNode json) { //NOSONAR 
 private static void writeLockDataset(LockList locks, Dataset dataset) { 
 indexAccessor.forceDelete(logRecord.getNewValue()); } else if (logRecord.getNewOp() == AbstractIndexModificationOperationCallback.UPSERT_BYTE) { // redo, upsert the new value indexAccessor.forceUpsert(logRecord.getNewValue()); 
 ILSMComponentFilter filter = operationalComponents.get(outputElement.cursorIndex).getLSMComponentFilter(); 
 @Option(name = "-p", aliases = "--partition-range-start", usage = "Starting partition number for the set of data generators (default = 0)") 
 indexOnlyPlanInfo.first = isIndexOnlyPlan; 
 String internalEvaluatorClassName = CodeGenHelper.toInternalClassName(originalEvaluatorClassName); if (internalEvaluatorClassName.equals(OBJECT_CLASS_NAME)) { 
 private T1 first; private T2 second; private T3 third; private T4 fourth; 
 public void fail(HyracksDataException cause) throws HyracksDataException { // No op 
 public static List<String> findNodes(MetadataTransactionContext mdTxnCtx, String nodeGroupName) throws AlgebricksException { return MetadataManager.INSTANCE.getNodegroup(mdTxnCtx, nodeGroupName).getNodeNames(); } 
 final HyracksDataException cause = HyracksDataException.create(e); writer.fail(cause); throw cause; 
 buffer.append("\"" + str(v) + "\""); first = false; 
 addIndent(indent).append("\"data-source\":\"" + op.getDataSource() + "\""); 
 for (LogicalVariable v : op.getInputVariables()) { if (!first) 
 .append(op.getPayloadExpression().getValue().accept(exprVisitor, indent) + "\""); 
 buffer.append("{\"expression\":\"" + ve.second.getValue().accept(exprVisitor, indent).replace('"', ' ') + "\"}"); 
 public static PlanFormat planFormat; public static PlanFormat opPlanFormat; 
 buffer.append("]"); 
 addIndent(indent) .append("\"second\":\"" + p.second.getValue().accept(exprVisitor, indent).replace('"', ' ') + "\""); 
 addIndent(indent).append("\"expressions\":\"" + op.getCondition().getValue().accept(exprVisitor, indent) .replace('"', ' ') + "\""); 
 if (op.getVariables().size() > 0) { 
 buffer.append("\"" + str(v) + "\""); first = false; 
 addIndent(indent) .append("\"additional-before-upsert\":\"" + op.getBeforeOpAdditionalNonFilteringVars() + "\""); 
 append(out, "\"operator-id\":" + op.getOperatorID()); 
 SessionConfig conf = new SessionConfig(writer, OutputFormat.ADM, optimize, true, generateBinaryRuntime); 
 buffer.append("\"" + str(v) + "\""); first = false; 
 private final String nodeId; 
 CompilerProperties compilerProperties = AppContextInfo.INSTANCE.getCompilerProperties(); 
 if (!op.getExpressions().isEmpty()) { 
 buffer.append(","); } 
<|del|> 
 conf.out().println("----------Expression tree:"); 
 response.setStatus(HttpResponseStatus.OK); HttpUtil.setContentType(response, ContentType.TEXT_HTML, Encoding.UTF8); 
 return false; } 
 return new Pair<Query, Integer>(q, q.getVarCounter()); 
 // Deducts input/output frames. this.memoryLimit = framesLimit <= 0 ? -1 : ((long) (framesLimit - 2)) * ctx.getInitialFrameSize(); 
 return new DdlApiServlet(ctx, paths, appCtx, ccExtensionManager.getAqlCompilationProvider(), 
<|del|> 
<|del|> 
 public void cleanupArtifacts() throws HyracksDataException { //Noop 
 public static final ExecutionTrace INSTANCE = new ExecutionTrace(); 
 final ILSMIOOperation myIoOp = this.ioOp; if (myIoOp instanceof Comparable && other instanceof ComparableTracedIOOperation) { return ((Comparable) myIoOp).compareTo(((ComparableTracedIOOperation) other).getIoOp()); 
<|del|> 
<|del|> 
 return "GeometryCollection".equals(type) || "MultiLineString".equals(type) || "MultiPoint".equals(type) || "MultiPolygon".equals(type); 
 private Deque<Integer> prefix; 
 @Override @SuppressWarnings("unchecked") 
import java.io.ByteArrayInputStream; import java.io.DataInputStream; import java.io.DataOutput; import java.io.IOException; 
 public static final TraceCategoryRegistry INSTANCE = new TraceCategoryRegistry(); 
 public DeployedJobSpecId undeployJobSpec(DeployedJobSpecId deployedJobSpecId) throws Exception; 
 Set<JobFlag> flags, Map<byte[], byte[]> jobParameters, DeployedJobSpecId deployedJobSpecId) throws Exception; 
 return datasets.get(datasetID).getOpTracker(); 
<|del|> 
 public FullTextContainsExpressionVisitor() { // no parameter is needed. 
<|del|> 
 option = option.toLowerCase(); 
 void addCompactionPolicy(JobId jobId, CompactionPolicy compactionPolicy) throws AlgebricksException, RemoteException; 
 } else if (cmp == IdCompareResult.GREATER_THAN) { 
<|del|> 
 throw new ACIDException(e); 
 public void close() throws ACIDException { 
 txnCommitAcks = new ConcurrentHashMap<>(); replicationTxnsPendingAcks = new ConcurrentHashMap<>(); shuttingDownReplicaIds = new HashSet<>(); 
 IApplicationConfig config = ncConfig.getConfigManager().getNodeEffectiveConfig(replicaId); sc.connect(new InetSocketAddress(config.getString(NCConfig.Option.REPLICATION_LISTEN_ADDRESS), config.getInt(NCConfig.Option.REPLICATION_LISTEN_PORT))); 
<|del|> 
 Replica replica = replicas.get(replicaId); 
 /* 
 public static ClusterControllerService cc; public static NodeControllerService[] ncs; public static IHyracksClientConnection hcc; 
<|del|> 
 InetSocketAddress replicationChannelAddress = new InetSocketAddress(InetAddress.getByName(nodeIP), dataPort); 
 IAppRuntimeContextProvider asterixAppRuntimeContextProvider, TransactionProperties txnProperties) 
 remoteReplicas.add(new Replica(replica, configManager.getNodeEffectiveConfig(replica).getString(NCConfig.Option.REPLICATION_LISTEN_ADDRESS), configManager.getNodeEffectiveConfig(replica).getInt(NCConfig.Option.REPLICATION_LISTEN_PORT))); 
 locations.remove(new Replica(deadReplica, "", -1)); 
 public ClusterControllerService cc; //NOSONAR public NodeControllerService[] ncs = new NodeControllerService[2]; //NOSONAR public IHyracksClientConnection hcc; //NOSONAR 
 boolean skipped = TestHelper.isInPrefixList(ignore, queryFileShort); 
 && Objects.equals(query, target.query) && Objects.equals(returnExpression, target.returnExpression) && varCounter == target.varCounter && Objects.equals(var, target.var); // NOSONAR 
 private static final Map<String, Class<? extends IReplicationStrategy>> BUILT_IN_REPLICATION_STRATEGY = new HashMap<>(); 
 (PersistentLocalResourceRepository) appCtx.getLocalResourceRepository(); 
<|del|> 
 private static final Logger LOGGER = LogManager.getLogger(); 
 protected boolean includeMutableComponent; 
<|del|> 
<|del|> 
<|del|> 
<|del|> 
 * SHOW FILES IN [dbName.]tableName [PARTITION(key=value,...)] 
 Preconditions.checkState(partition != null); partitions = Lists.newArrayList(partition); 
 previousCatalogVersion = tbl.getCatalogVersion(); loadReq = tableLoadingMgr_.loadAsync(tblName); 
<|del|> 
<|del|> 
 throw new AnalysisException(name + " size must be > 0: " + len); 
 // Use the stmt's analyzer which is not necessarily the root analyzer 
 * Recover partitions of specified table. 
 /** * Returns the destination tuple descriptor of this path, or null * if the destination of this path is not a registered alias. */ 
 public void migrateConjunctsToInlineView(Analyzer analyzer, 
 private Table table_; 
 List<List<String>> partitionsNotInHms, HdfsTable hdfsTable) throws ImpalaException { 
 HdfsCachingUtil.uncachePartition(partition); 
 limitExpr_ = (other.limitExpr_ != null) ? other.limitExpr_.clone() : null; offsetExpr_ = (other.offsetExpr_ != null) ? other.offsetExpr_.clone() : null; 
<|del|> 
 private MembershipSnapshot() { } 
 if (conjuncts_.isEmpty() && otherJoinConjuncts_.isEmpty() && !joinOp_.isSemiJoin() && !joinOp_.isOuterJoin()) { 
 analyzer.registerConjuncts(whereClause_, false); 
 Type type = convertParquetType(field); Preconditions.checkNotNull(type); 
 stmt_.analyze(analyzer_); // Check whether the stmt_ contains an illegal mix of un/correlated table refs. stmt_.getCorrelatedTupleIds(analyzer_); 
 result = result < 0 ? -1 : Math.round(result * DEFAULT_JOIN_SELECTIVITY); 
 List<T> filtered; 
 result.setDbs(dbs); 
 Preconditions.checkState(isAnalyzed()); 
 throw new AnalysisException("Avro schema is null or empty: " + table_.getFullName()); 
 // Check avro schema when it is set in avro.schema.url or avro.schema.literal to avoids // potential metadata corruption (see IMPALA-2042). // If both properties are set then only check avro.schema.literal and ignore avro.schema.url. 
<|del|> 
 // one and then sharing it among threads. All operations on a connection are // thread-safe. 
 public Db(String name, Catalog catalog, org.apache.hadoop.hive.metastore.api.Database msDb) { 
 * Helper function used to build privilege results. 
 cardinality_ = 1; // The containing SubplanNode has not yet been initialized, so get the number // of nodes from the SubplanNode's input. 
 PartitionSpec partitionSpec, boolean ifExists, boolean purgePartition) { 
 if (privilegeMap == null) return; 
<|del|> 
 "Expression is of class '%s'. Expected class '%s'", firstExpr.getClass().getSimpleName(), cl.getSimpleName()), 
 public InsertStmt getInsertStmt() { return insertStmt_; } public DropTableOrViewStmt getCleanupStmt() { return cleanupStmt_; } 
 public static boolean tableParamsAreValid(Map<String, String> params) { 
 private static final Logger LOG = LoggerFactory.getLogger(Db.class); private static TSerializer serializer = new TSerializer(new TCompactProtocol.Factory()); 
 for (Db db: dbs) tDbs.add(db.toThrift()); 
 + operator + " " + rhs); 
 private static final int HIVE_METASTORE_DB_PARAM_LIMIT_BYTES = 4000; 
 // Expr (lhs of join predicate) on which the filter is applied 
 "'a' ILIKE '%b.', ('a' ILIKE '%b.'), " + 
 // Lock used to ensure that in-place modifications to cached table/db objects in // catalog_ and the corresponding RPC to apply the change in the HMS are atomic. // Such modifications are done for CREATE/DROP/ALTER TABLE/DATABASE requests. 
 // Runtime filters assigned to this node. For ScanNodes, they contain the exprs // on which filters are applied; for JoinNodes, they contain the exprs on which // filters are built. 
 protected Expr getFirstBoundChild(List<TupleId> tids) { 
 * @param location - Path in HDFS containing the UDF. 
 HashMap<CreateFunctionStmtBase.OptArg, String> optArgs) { // The return and arg types must either be both null or non-null. Preconditions.checkState(!(args == null ^ retTypeDef == null)); 
 Map<String, Db> oldDbCache = dbCache_.get(); 
 return JavaUdfDataType.BOOLEAN; } else if (c == ByteWritable.class) { return JavaUdfDataType.BYTE_WRITABLE; 
<|del|> 
 // All tableRefs have been analyzed, but at least one table is missing metadata. 
 String keyColumnsProp = Preconditions.checkNotNull(msTbl.getParameters() .get(KEY_KEY_COLUMNS).toLowerCase(), "'kudu.key_columns' cannot be null."); 
 isMergeAggFn_ = other.isMergeAggFn_; // Clone the params in a way that keeps the children_ and the params.exprs() // in sync. The children have already been cloned in the super c'tor. 
 if (sourceStmt_ == null) createSourceStmt(analyzer); 
 return "Could not read the root directory at " + 
 throw new FlumeException("Failed to create Kudu Insert object!", e); 
 } producerContext = new Context(); 
 private byte[] token; /** The start partition key of the scan. */ 
 scanner = ScanToken.deserializeIntoScanner(split.getScanToken(), client); 
 * Analyze the 'skip.header.line.count' property to make sure it is set to a valid * value. It is looked up in 'tblProperties', which must not be null. 
 setRules(defaultRule); 
 * @param tableName the table's name 
 @Override protected String getDisplayLabelDetail() { StringBuilder output = new StringBuilder(joinOp_.toString()); if (distrMode_ != DistributionMode.NONE) output.append(", " + distrMode_.toString()); return output.toString(); } @Override 
 if (!(fs instanceof DistributedFileSystem) && !(fs instanceof S3AFileSystem)) { 
public abstract class TreeNode<NodeType extends TreeNode<NodeType>> { 
 analyzeRowFormat(analyzer); 
<|del|> 
 "Partition expr contains conjuncts that are not " + "fully bounded by one partition column."); 
 List<ColumnDef> colDefs, List<ColumnDef> avroCols, StringBuilder warning) throws AnalysisException { 
 Preconditions.checkArgument(partitionSpec == null || name != null); 
 hiveClient_ = new HiveMetaStoreClient(hiveConf); 
 * Returns all DataSources that match 'matcher'. 
 + Bytes.pretty(scannerId), resp); 
 UdfExecutor createUdfExecutor(String jarFile, String udfClassPath, Type retType, 
 "refresh functional_rc.alltypesagg partition (year=2010, month=1, day=1)", 
 // Early creating the tablet so that it parses out the pb. 
 // NB: this is called once per event 
 if (num == NUM_PARTITION_LOG_LIMIT) break; 
 Set<String> partColNames = Sets.newHashSet(); 
 if (ignore || partColNames.size() < table.getNumClusteringCols()) { 
 ex = e; logger.error("Error closing client", e); 
 // Must be set before analysis 
 * Return the name that should be used in Kudu when creating a table, assuming a custom * name was not provided. 
 // with location 
 if (smap == null) return result; 
 return fqTableName_ != null ? fqTableName_ : tableName_; 
 Map<String, ColumnDef> pkColumnDefsByName = 
 builder.append(" INTO "); Preconditions.checkState(numBuckets_ != NO_BUCKETS); 
 * Returns the set of file formats being scanned. 
 LOG.error(String.format(HMS_RPC_ERROR_FORMAT_STR, "getTableObjectsByName") + e.getMessage()); 
 return !tableDef_.getPrimaryKeyColumnDefs().isEmpty(); 
 * the ordering exprs refer to the materialized tuples instead of the original input. 
 rules.add(new BetweenToCompoundRule()); 
 * Class describing a BETWEEN predicate. This predicate needs to be rewritten into a * CompoundPredicate for it to be executable, i.e., it is illegal to call toThrift() * on this predicate because there is no BE implementation. 
 } 
 // Remember the SQL string before unnesting operands. 
 "partition values is different than the number of distribution " + 
 ImpalaException, TException { 
public class ReplaceStringUdf extends UDF { 
 if (encodingVal_ != null) { 
 // The TimeZone should be the same no matter what the TimeZone is of the computer // running this code, in order to ensure the generated data is always the same. 
 if (!col.getType().equals(newColDef_.getType())) { 
 * TODO: It is quite possible that there will be lock contention in this method during * the initial metadata load. Figure out ways to fix it using finer locking scheme. 
<|del|> 
 * - To maintain a consistent mapping across all the table instances so that the * assignment of scan ranges to I/O threads is balanced and consistent for all scans * on the same host. 
 for (Map.Entry<Path, List<HdfsPartition>> entry: partsByPath.entrySet()) { Path partPath = entry.getKey(); List<HdfsPartition> partitions = entry.getValue(); // For each data file in the partPath, synthesize the block metadata. 
 Preconditions.checkState(!expr.contains(SlotRef.class)); 
 private boolean isConstant_; 
 * using {@link FlushMode#AUTO_FLUSH_BACKGROUND AUTO_FLUSH_BACKGROUND} mode. 
<|del|> 
 /** * This test queries two tables to allow testing missing statistics. * functional.alltypes (a) has statistics * functional.tinytable (tiny) does not */ 
<|del|> 
<|del|> 
 public static ScalarType createClippedDecimalType(int precision, int scale) { Preconditions.checkState(precision >= 0); Preconditions.checkState(scale >= 0); 
 * @param masterAddresses the addresses of masters to fetch from 
 * Walks through conjuncts and populates dictionaryFilterConjuncts_. 
 if (isExternal()) { analyzeExternalKuduTableParams(); 
 } catch (AnalysisException e) { throw e; } 
<|del|> 
 setMaterializedTupleInfo(sortTupleDesc, sortTupleExprs); return substOrderBy; 
 public byte toFlatBuffer() { 
 // This is the expected exception. 
<|del|> 
 return Lists.newArrayList(Splitter.on(",").trimResults().omitEmptyStrings().split( 
 * @return the replica selection mechanism 
 int fbReplicaHostIdxOffset = fbb.endVector(); 
 * the caller must make sure that the value matches any columns that were added to the 
 synchronized (functions_) { functions_.clear(); } 
 } child = child.unwrapExpr(false); 
 * The transformation is applied if one of the children is an IN predicate and the other child 
 boolean isConstantOpExpr(Expr expr) { return expr.getChild(0).isConstant() && !expr.getChild(1).isConstant(); 
 import org.apache.sentry.core.common.exception.SentryUserException; 
 if (e instanceof RecoverableException && retries < 5) { 
 /** Timer to monitor read timeouts for connections (used by Netty's ReadTimeoutHandler) */ 
<|del|> 
 * Callback upon 'successful' completion of an attempt to acquire a new token, * i.e. an attempt where no exception detected in the code path. 
 rpc.method(), RpcTraceFrame.Action.GET_NEW_AUTHENTICATION_TOKEN_THEN_RETRY) 
 * Handles initializing this class with objects specific to it. 
 } 
 // Kudu doesn't support Parquet's TIMESTAMP. 
 runPlannerTestFile("kudu"); 
 Response response = new Response(id, iterator, hasMore, resp.hasSnapTimestamp() ? resp.getSnapTimestamp() : AsyncKuduClient.NO_TIMESTAMP, resp.hasPropagatedTimestamp() ? resp.getPropagatedTimestamp() : AsyncKuduClient.NO_TIMESTAMP); 
<|del|> 
<|del|> 
 // Create an object with a serialization size which is larger than 4GB. // The reason we split the object into 8 strings instead of allocating a single 
 * A wrapper around UnsafeUtil class that exposes reallocate(), free() and copy() * methods. This wrapper is written so that tests can implement their own custom * allocators by overriding these methods. 
 private static final String BUFFER_LIMIT_EXCEEDED_MSG = "Buffer allocation reaches the " + "maximum limit of " + BUFFER_MAX_SIZE_LIMIT + " bytes"; 
 public void NbaosTest() { NativeTestAllocator testAllocator = new NativeTestAllocator(); 
 * Whether to wait for the table to be fully created before this create * operation is considered to be finished. 
 public void TestIsNullPredicates() throws AnalysisException { 
 TParseQueryOptionsResult parseResult = new TParseQueryOptionsResult(); deserializer.deserialize(parseResult, result); return parseResult; 
 * Get an array of vertices ids in the scc. The caller shouldn't modify the returned * array. * Time complexity: O(1) 
<|del|> 
<|del|> 
<|del|> 
 public boolean isArrayPosRef() { 
<|del|> 
 List<String> actualHints = Lists.newArrayList(); List<PlanHint> hints = insertStmt.getPlanHints(); for (PlanHint hint: hints) actualHints.add(hint.toString()); if (actualHints.isEmpty()) actualHints = Lists.newArrayList((String) null); 
 int timeoutToleranceMs = 1500; int sleepPeriodMs = timeout * 1000 + timeoutToleranceMs; Thread.sleep(sleepPeriodMs); 
 ++i; 
 throw new AnalysisException(String.format("ALTER TABLE SET ROW FORMAT is " + "only supported on TEXT or SEQUENCE file formats. Conflicting " + "table/format: %1$s / %2$s", tbl.getFullName(), format.name())); 
 private final Object subjectLock = new Object(); 
 // Should be in sync with corresponding values in runtime-filter-bank.cc. private static final long MIN_BLOOM_FILTER_SIZE = 4 * 1024; private static final long MAX_BLOOM_FILTER_SIZE = 512 * 1024 * 1024; 
 rows.put(rowData, currentRowOffset, col.getTypeSize()); 
 // Check for slotrefs and subqueries before analysis so we can provide a more // helpful error message. 
 private enum SubjectType { 
 // Looks up the last time the function's source file was updated. Returns -1 if a // modified // time is not applicable. public final long GetLastModifiedTime() { long mTime = -1; 
 TupleDescriptor intDesc = stmt.getAggInfo().intermediateTupleDesc_; intDesc.materializeSlots(); intDesc.computeMemLayout(); 
<|del|> 
 public static boolean isImplicitlyCastable(Type t1, Type t2, boolean strict) { 
<|del|> 
 updateTimestampProperty(msTable_, HdfsTable.TBL_PROP_LAST_DDL_TIME); 
 * Converts a microsecond offset from the Unix epoch (1970-01-01T00:00:00Z) * to a {@link Timestamp}. 
<|del|> 
 return FeCatalogUtils.getRowCount(schemaInfo_.msTable_.getParameters()); 
 NULL_PARTITION_KEY_VALUE_CONF_KEY, DEFAULT_NULL_PARTITION_KEY_VALUE); 
 analyzer.registerPrivReq( new PrivilegeRequestBuilder().onServer(authzServer).all().toRequest()); 
 if (LOG.isTraceEnabled()) LOG.trace("Rewritten SQL: " + stmt.toSql(true)); 
 private final static Logger LOG = LoggerFactory.getLogger(AvroSchemaUtils.class); 
<|del|> 
 private Expr simplifyIfFunctionCallExpr(FunctionCallExpr expr) { 
 req_ = new TReportTableUsageRequest(new HashMap<TTableName, TTableUsage>()); reportThread_ = new Thread(new Runnable() { 
 for (TPartialPartitionInfo p: resp.table_info.partitions) { checkResponse(p.isSetId(), req, "response missing partition IDs for partition %s", p); partitionRefs.add(new PartitionRefImpl(p)); 
 byte[] compressedStats = part.getPartitionStatsCompressed(); if (compressedStats == null) return null; 
 List<String> javaFuncNames; 
<|del|> 
 TimeUnit.NANOSECONDS.timedWait(CatalogdTableInvalidator.this, sleepTimeNano); 
 oldThreadLocalValue_ = THREAD_LOCAL.get(); // TODO: remove when allowing nested scopes. Preconditions.checkState(oldThreadLocalValue_ == null); 
 public boolean isTimedOut(long ttlMillis) { 
 throw new UnsupportedOperationException("Touch is only supported in the binary protocol"); 
<|del|> 
 ArrayList<InetSocketAddress> addrs = new ArrayList<InetSocketAddress>(servers.size()); 
 * Gets the value of the time to live field if the field exists in the message. * @return The time to live value; 
 /** * Since the tap ack doesn't specify any specific keys to get * this function always returns null; */ 
 if (TestConfig.defaultToIPV4()) { 
 assertEquals("Fail during getting data with primary non active node.", OBJ_KEY, memcachedClient.get(OBJ_KEY)); 
<|del|>
 getLogger().error("Failed to obtain connection. Cancelling op"); 
<|del|> 
 + "To allow unauthorized connections, omit password after colon. E.g.\n" 
 getLogger().error("Critical reconfiguration error: " + "Server list from Configuration and Nodes " + "are out of synch. causing %s to be removed", 
 Map<MemcachedServer, Boolean> servers_set = new HashMap<MemcachedServer, Boolean>(); for (Bucket bucket : mock.getBuckets().values()) { if (bucket == null) { 
 public static ErrorCode getErrorCode(short b) { 
 /** * {@inheritDoc}. */ 
<|del|>
 private static final Map<String,Class> commandMap = new HashMap<String, Class>(); private static final Map<HarakiriCommand.Command, Class> classMap 
 * These metrics (which include the PERFORMANCE metrics implicitly) provide 
 * Signals that this future is complete. 
import net.spy.memcached.ops.TapOperation; import net.spy.memcached.ops.UnlockOperation; 
<|del|> 
 private long shutdownTimeoutSeconds = 0; private MemcachedClient client; 
 sb.append(", dcpEnabled=").append(dcpEnabled); 
 case HTTP_CREATED: case HTTP_ACCEPTED: 
 ); 
 final ByteBuf extras = msg.getExtras(); 
 private final String path; private final Lookup operation; 
<|del|> 
 protected void checkRange(String name, String start, String end) { 
 .withTraceIdentifier("DCPConnection." + env.dcpConnectionName()) 
 * This method throws under the following conditions: 
 throw new CouchbaseException(status.toString()); 
 reset(); 
 final private String username; final private String password; 
 * Copyright (c) 2017 Couchbase, Inc. */ package com.couchbase.client.dcp; 
 private volatile Subscriber subscriber; 
 assertEquals(response.status(), ResponseStatus.SUCCESS); 
 KeyValueSelectBucketHandler(String bucket, boolean selectBucketEnabled) { 
 LOGGER.warn("Failover Log not my vbucket response for vbucket " + vbid); 
<|del|> 
 ctx.write(msg, promise); 
 assertEquals("UPDATE `default` USE KEYS $__id__ SET boolean = $boolean, string = $string, double = $double, int = $int, long = $long RETURNING meta().id;", 
<|del|> 
 /** The only instance of FSAccess */ 
 optionsPage = new OptionsPage(pageTitle, pageTitle, UIIcons.WIZBAN_CREATE_PATCH); 
 Activator.error(UIText.GitImportWizard_errorParsingURI, e); 
 private final IConfigurationElement repositoryServerProviderElement; 
 } 
 boolean exists = containsRemoteForUrl( existingRepository.getConfig(), gitUrl); 
 * Retrieves list of commits and the changes associated with each commit 
 directories = dirs; 
 for (String file : filtered) 
 public static final String PREF_COMMAND_TIMEOUT_VALUE = PREFIX + "commandTimeoutValue"; //$NON-NLS-1$ 
 while ( fState != TimerThreadState.SHUTDOWN ) { if ( fState == TimerThreadState.HALTED ) { halted(); } else { running(); } 
<|del|> 
 ParserState state = ParserState.NORMAL; 
 public static final int BUILD = 1 << 0; 
 if ( outputStream == null ) { return; } 
 private TreeWalk createFileWalker(RevWalk walk, Repository db, List<FilterPath> paths) { 
<|del|>
<|del|> 
 && (relativeX >= textSpan.x && relativeX <= textSpan.y)) 
 * Copyright (c) 2009, 2012 David Green and others. 
 int[] version = parseVersion(req.getHeader(HDR_USER_AGENT)); if (hasChunkedEncodingRequestBug(version, req)) { 
 public static IContainer findContainer(File file) { 
 public static void removeBreakpoints(Collection<IBreakpoint> breakpoints) { 
 // If the variable has been already initialized, then there's no deprecation message 
 /* * Creates a default statistics viewer if there is none * defined for the trace type. */ 
public class TmfViewerFactory { 
 flags &= ~DELTA_ATTEMPTED; 
 if (resource != null) 
 // Move the element to the end of the list remap.add(remap.remove(index)); 
 return new ShowInContext(null, new StructuredSelection(resources)); 
 CommandFactory factory = control.getCommandFactory(); control.queueCommand(factory.createMIInfoOS(dmc), new DataRequestMonitor<MIInfoOsInfo>(getExecutor(), rm) { 
 public RebaseCommand runInteractively(InteractiveHandler handler) { 
 assert id != null; if (id != null && !id.equals(fResourceClassId)) 
 super(Messages.getString("StapNewWizardPage.WizardPage")); setTitle(Messages.getString("StapNewWizardPage.Title")); setDescription(Messages.getString("StapNewWizardPage.setDescription")); 
 * @return the first callsite that has that event name 
<|del|> 
 "Alphabet.java", "Apple.java", "Arm.java", "Army.java", "Babby.java" }; 
 c.parseCanonical(walk, Constants.encode(buf.toString())); 
 private static final String metadataDecs = "typealias integer { size = 8; align = 8; signed = false; } := uint8_t;\n" 
 IBindingService bindingService = (IBindingService) PlatformUI .getWorkbench().getAdapter(IBindingService.class); 
 } //Safety if the LDAP query is not resolved properly if (fParticipant.getEmail() == null) { 
import org.eclipse.core.resources.IResource; 
<|del|> 
<|del|> 
 artifact = WorkItemUtil.get(atsObject); 
 // Return the corresponding IProject as parent because from CNF point of view the IProject is the parent. 
 * Split the expression-group into a list of individual expression strings. 
 StubbyLaunchConfigurationDelegate { 
 if (project instanceof IProject) 
 return size == null ? 0 : size.longValue(); 
 public int getPid() { // check if the pid is in the context 
 public CtfKernelEvent getCurrentEvent() { 
 String getName(); 
 * @author Matthew Khouzam 
 public IResource copy(final String newName, final boolean copySuppFiles) { 
 if (branchCommit1.getName().equals(revisionId)) 
 * begin the body by emitting the body element. Overriding methods should call <code>super.beginBody()</code>. 
 * Dialog implementation for the Select Trace Executable command 
 throw new SQLException(ex); } finally { if (connection != null) { try { connection.close(); } catch (SQLException ex) { // Do nothing on close exception; } } 
 /** * A file and name * 
 private final class scanRunnable implements Runnable { private final class UpdateUIRunnable implements Runnable { private final boolean treeUpdated; 
 BUTTON_CHECK_SUBTREE_ID, Messages.TmfTimeFilterDialog_CHECK_SUBTREE, 
<|del|> 
 logf("Artifact [%s] attribute type [%s] is valid - did not delete\n", art.toStringWithId(), attrType.toString()); 
 if (((ReferenceChange)diff).getReference().isContainment()) { 
<|del|> 
 * Contributors: * Boeing - initial API and implementation *******************************************************************************/ 
 result = loadFromStore(teamDefArt); 
 * Contributors: * Boeing - initial API and implementation *******************************************************************************/ 
 parseMismatchedException(e); 
 Map<String, String> temp = getEnvironmentSetup(path); if(temp!= null) { return true; 
 /********************************************************************* * This class in required to access the protected members of the Configuration object. */ 
 Constants.R_REMOTES); Collections.sort(nodes); 
 FileRepositoryBuilder.create(clonedRepositoryFile).getBranch()); 
 if (dslUserDef.getUserDefOption().contains("GetOrCreate")) { userArt = UserManager.createUser(getOseeUser(dslUserDef), transaction); } 
<|del|> 
<|del|> 
public class ImportTraceWizardPageSelectDirectories extends AbstractImportTraceWizardPage { 
class TraceToValidate implements Comparable<TraceToValidate> { 
 * @return An array of child elements 
<|del|> 
 } 
 public final static String formatNumber(long value, int base, boolean signed) { 
 f = new File(tempTraceDir + "/dummyChan"); 
 * Get the trace properties of this traceElement if the corresponding trace * is opened in an editor 
<|del|> 
 final ITmfContext tmpContext = seekEvent(context.getLocation()); event = getNext(tmpContext); 
 return (IReviewRemoteFactoryProvider) ((ReviewsConnector) getConnector()).getReviewClient(getTaskRepository()) .getFactoryProvider(); 
 /** A comparator class */ 
 * Copyright (c) 2012, 2013 Ericsson 
 * Copyright (c) 2012, 2013 Obeo and others. 
<|del|> 
 private boolean multipleValuesFound; 
 String traceTypeId = CustomTxtTrace.class.getCanonicalName() + ':' + def.definitionName; 
 ObjectId c4 = merge(c2); 
 return new InputSource(new ByteArrayInputStream(new byte[0])); 
 public static MCommand createCommand(Command cmd, EModelService modelService, final MCategory categoryModel) throws NotDefinedException { MCommand command = modelService.createModelElement(MCommand.class); 
 private List<ITimeEvent> fEventList = new ArrayList<ITimeEvent>(); 
 Status status = new Status(IStatus.ERROR, OprofileLaunchPlugin.PLUGIN_ID, OprofileLaunchMessages.getString("oprofilelaunch.error.interrupted_error.status_message")); //$NON-NLS-1$ 
 for (int i = fNbBuckets - 1; i >= offset; i--) { fBuckets[i] = fBuckets[i - offset]; fLostEventsBuckets[i] = fLostEventsBuckets[i - offset]; 
 } 
<|del|> 
 switch (columnIndex) { case 0: return element.col1; case 1: return element.col2; 
 out.putArchiveEntry(entry); out.closeArchiveEntry(); 
 @Argument(index = 0, metaVar = "GROUP_ID:ARTIFACT_ID:VERSION", required = true, usage = "The maven coordinate for which you want to generate Javadoc", handler = ArtifactOptionHandler.class) 
<|del|> 
 /** * @author Donald G Dunne */ 
 return false; 
 if (candidateIsDelete) { 
 && (!defaultOnly || (defaultOverwriteUrl.equals("") && configuration.isDefault()) || (configuration.url.equals(defaultOverwriteUrl)))) { 
 private CommandFactory fCommandFactory; 
 SKIP, 
 throw new UnsupportedOperationException( "It is always unnecessary to call remove from a DrainingIterator since every call to next has already called remove."); 
 while (fIsPaused) { synchronized (fSynchObject) { 
 fTraces = new HashMap<ITmfTrace, TmfTraceContext>(); 
<|del|> 
<|del|> 
 * '-gdb-show language' returns the current source language. 
 * Offer options to cleanup uncommitted changes 
 failingPaths.put(tw.getPathString(), MergeFailureReason.DIRTY_WORKTREE); 
 * 
 /** Time-out tests after 10 seconds. */ @Rule public TestRule globalTimeout= new Timeout(10000); 
 private class LabelAndRange { 
 public static final String ID = "org.eclipse.linuxtools.lttng2.kernel.analysis"; //$NON-NLS-1$ 
 } else if (nonAbstractMethod(holder) || holder.isConstructor()) { 
 public void setTocOptions(TocOptions tocOptions) { this.tocOptions = tocOptions; } public void setSourceTypes(final Set<String> sourceTypes) { 
 public static String createLocaleSpecificNumberString(Locale loc, boolean minus, String integerPart, String fractionPart, NumberStringPercentSuffix percentSuffix) { 
 } catch (IOException ex) { OseeExceptions.wrapAndThrow(ex); } finally { Lib.close(zout); } 
 //Protect against case where java.sql.Timestamp is used 
 * Copyright (c) 2014 Obeo. 
 * 
 this.compareColor = compareColor; 
<|del|>
<|del|> 
 Adapter adapter = EcoreUtil.getAdapter(createdElement.eAdapters(), HasChildrenNotYetSynchronizedMarker.class); 
<|del|> 
 "getControl() of wizard page returns null. Did you call setControl() in your wizard page?"); //$NON-NLS-1$ 
 distance += weightProviderRegistry.getHighestRankingWeightProvider( reference.eClass().getEPackage()).getWeight(reference) 
 public final void testTwoMinutesDifference() { String result = new DateFormatter().formatUnit(new Date(0), new Date( TimeUnit.MINUTES.toMillis(2))); assertEquals("2 minutes ago", result); 
 if (getCheckedItems().contains(element)) 
 boolean isInWorkspace(IStorage storage) { final IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot(); 
 && isConstexprFuncOrNull(getOverload(point)); 
 m_label.setVerticalAlignmentFromScout(LABEL_VERTICAL_ALIGNMENT_MIDDLE); 
 public void testGetProposalsTask() { 
 listeners.remove(listener); 
 private void setCSSData() { this.setData(CSSSWTConstants.CSS_ID_KEY, SPLASH_PROGRESS_PART_ID); fProgressIndicator.setData(CSSSWTConstants.CSS_ID_KEY, SPLASH_PROGRESS_INDICATOR_ID); fLabel.setData(CSSSWTConstants.CSS_ID_KEY, SPLASH_PROGRESS_TEXT_ID); 
 public Set<String> getValues() { synchronized (fValues) { return fValues.keySet(); } 
<|del|> 
 if (newSubAttribute == null || newSubAttribute.getName() == null) { 
 * Gets the number of clients 
public enum GetPacketReturnCode implements IBaseCommand { 
 public boolean isRedirectingPageOnBuild() { 
 /** * Map with the Lttng streams * * key: stream id value: stream file */ private final Map<Long, File> fStreams = new TreeMap<>(); 
public enum GetMetadataReturnCode implements IBaseCommand { 
 Map<Repository, Object> res = new LinkedHashMap<Repository, Object>( 
 .createTableFormMasterDetailComposite(parent, SWT.BORDER, getEClass()); 
<|del|> 
 public PrivateDatum(String id, String name, String description, ImageDescriptor icon) { checkNotNull(id, "id should not be null"); 
 m_container.setVirtualBounds(BAR_CONTAINER_BOUNDS); // no need to draw the ontainer's bounds 
 * Copyright (c) 2006 IBM Corporation and others. 
 // create new state 
<|del|>
 // If there has been a key pressed then mark as dirty entryChanged = true; 
import org.eclipse.linuxtools.ctf.core.event.types.ArrayDefinition; import org.eclipse.linuxtools.ctf.core.event.types.Encoding; 
 validateStashedCommit(stashed, 3); 
 * Copyright (c) 2012, 2014 Obeo. 
 private final DispoItemData item1 = new DispoItemData(); private final DispoItemData item2 = new DispoItemData(); 
 testParserRule(fullVariableArray, fullVariableName); 
<|del|> 
 Map<String, String> principalMap = new HashMap<String, String>(); String prefix = state.equals(PermissionState.APPROVED) ? Constants.PREF_APPROVED : Constants.PREF_DISAPPROVED; 
<|del|> 
 * This String are needed to setTextIfDisable otherwise we get a * java.lang.NullPointerException due to * org.eclipse.sirius.editor.tools.api.menu.AbstractMenuBuilder$2.compare. 
 private static class ExpectedResultData extends AbstractInputData { 
 * Copyright (c) 2012, 2014 Obeo. 
 * Copyright (c) 2014 SWTBot Committers and others 
 return "org.eclipse.cdt.debug.ui.toolbar.openNewView"; //$NON-NLS-1$ 
 GerritUi.Ftracer.traceInfo("Process command : " + aQuery); 
<|del|>
 public synchronized Iterable<PacketStream> getStreams() { Iterable<PacketStream> iterable = new LinkedList<>(fStreams.values()); return iterable; 
 /** A {@link IDeferredWorkbenchAdapter} to which this compareInput can adapt to. */ 
 List<Port> ports = new ArrayList<Port>(); 
<|del|> 
public class CustomXmlTrace extends TmfTrace implements ITmfPersistentlyIndexable { 
 ((Snippet) snippet).setCode(code); 
 getBot().button("Delete").click(); getBot().button("Yes").click(); getBot().button("Close").click(); 
 * Copyright (c) 2014 Vadim Dmitriev and others. 
 if (traceElements.isEmpty()) { 
 private void readOrCreateAnonymousId() { 
 return numValue.toString(); 
 IContainer<CDOResourceNode> 
<|del|> 
 /** * Representation deletion pop-up title. */ private static String deleteRepresenationDialogTitle; 
 private String getViewId() { 
 return new StandardEEResolutionHandler(new AllKnownEEsResolutionHints()); 
 * Copyright (c) 2011, 2014 Obeo. 
 boolean isBorderNode = editPart instanceof AbstractDiagramBorderNodeEditPart; if (isBorderNode) { 
 result = Double.compare(this.value, otherDoubleValue); 
 return OFFSET_FORMAT.format(offset); 
<|del|> 
 private Resource loadResource(URI uri) { return super.getResource(uri, true); 
 public Map<String, Field> getFields() { return fields; 
 List<IFile> files = new ArrayList<IFile>(); 
 LOG.info("Heartbeat successfuly sent to specified URI: <{}>", uri); //$NON-NLS-1$ 
 public LockStatePrefetcher() 
 waitForCacheRemoval(); BugzillaRestConfiguration configuration_new1 = connector.getRepositoryConfiguration(actualFixture.repository()); assertThat(configuration, not(configuration_new1)); } private void waitForCacheRemoval() throws InterruptedException { 
 * This tag can be applied to an element (usually an MPart) to indicate that the element should * be handled as editor. 
 returnedValue = contribution.updateCreatedObject(returnedValue, loadedVersion); 
<|del|> 
 * Alvaro Sanchez-Leon - Bug 451396 - Improve extensibility to process MI "-thread-info" results * Simon Marchi (Ericsson) - Bug 378154 - Pass thread name from MIThread to the data model 
 final Properties baseProps = new Properties(); // The order how the properties been added is important! // It defines which properties win over others // (session user properties overwrite system properties overwrite project properties) 
 * @return proxy connection name. If no proxy is used returns an empty string. Never returns null. 
 ITmfEventAspect TIMESTAMP = new AbstractTmfEventAspect() { 
 private final Set<? extends ICategory> permissionsInput; private final String datumId; 
 * The packet source aspect for pcap events. 
 /** The list of children event providers */ 
 * @return the parent event provider or null if no parent. 
 CAP cap2 = textField.checkText(TEST, Operator.equals); 
 for (final ITmfTrace trace : getChildren(ITmfTrace.class)) { 
 protected Map connectionsToMoveEdgeDescriptor = new HashMap<ConnectionEditPart, MoveEdgeDescriptor>(); 
 pathInfo = pathInfo.substring(servletPath.length()); if (pathInfo.isEmpty() && !servletPath.isEmpty()) return null; 
 b.add(0, 1, "hello"); b.add(2, 3, "kitty"); assertEquals(a.hashCode(), b.hashCode()); 
 checkNotNull(ImmutableList.of( 
 LsRemoteCommand command = Git.lsRemoteRepository().setRemote(remote) .setTimeout(timeout); 
 List<? extends CDORevision> additionalLoadedRevisions = null; 
 Class<? extends TmfTrace> className = checkNotNull(this.getClass()); 
 Q7UIPlugin.log(e); 
 copy.commitWorkingCopy(true, new NullProgressMonitor()); 
<|del|> 
 * Activator for this plugin 
<|del|> 
 * Copyright (c) 2012, 2015 Obeo and others. 
 if (StringUtil.isEmpty(elementName)) { 
 assertTrue("A red cross must appear on the image of the node mapping.", runnable.getResult().booleanValue()); 
 /** * Contract for {@link ECrossReferenceAdapter} which resolve proxy ability can * be disabled. * * @see {@link SiriusCrossReferenceAdapterImpl} * * @author <a href="mailto:laurent.fasani@obeo.fr">Laurent Fasani</a> */ 
 } reenableECrossReferenceAdaptersBeforeEndOfClosing(); 
 return Arrays.asList(Action.RELOAD); 
<|del|> 
<|del|> 
 return IU.SOURCE_FILE_NAME; 
 public void testTableGlobalRefreshWithF5Shortcut() { 
 * @author David Soto Setzke 
 } else { // TODO hack for https://bugs.eclipse.org/bugs/show_bug.cgi?id=460158 
 public boolean equals(Object obj) { boolean result; 
 public String getHookName() { return PRE_COMMIT; 
 if (getEditorControl() != null && !getEditorControl().isDisposed() && KeyPressCommitRunnable.this.toCommit != null && KeyPressCommitRunnable.this.toCommit.equals(getEditorValue())) { 
 return checkNotNull(Collections.EMPTY_LIST); 
 monitor.beginTask("Tree item collapsing", 1); 
 assertTrue("The LocalResourceCollector is not set on resourceSet", lcrIt.hasNext()); 
 * a {@link IProgressMonitor} to give progression 
 * Copyright (c) 2007, 2010 THALES GLOBAL SERVICES. 
 // 1 - Check that uncontrol occurs on LibraryProject 
 * By specifying a 'queueSize' parameter, the implementation that runs in a 
 /** * Provides shared utility methods for unit tests working on logical models. The * model provider used for tests, {@link SampleModelProvider}, links all * "*.sample" files from a same directory together in a single logical model. */ 
 * Copyright (c) 2007, 2015 THALES GLOBAL SERVICES and others. 
 if (!EMPTY_STRING.equals(toDisplayInBrace)) { 
 assertEquals(DEFAULT_STRING, m_stringParam.value()); 
 * An callback which is being notified if the classpath of some project did 
 declareEdgeSourceTargets(availableVariables, tool.getEdgeMappings(), tool.getExtraSourceMappings(), tool.getExtraTargetMappings()); 
 private static RGB getRGBfromAttributes(Attributes attributes) { 
<|del|> 
 TableItem item = table.getItem(row); Rectangle bounds = item.getBounds(col); Point p = table.toDisplay(bounds.x, bounds.y); 
 throw new IllegalArgumentException("Pixel outside of the image"); 
 throw new IllegalStateException( "Invalid stage: " + entry.getStage()); //$NON-NLS-1$ 
 * @author <a href="maxime.porhel@obeo.fr">Maxime Porhel</a> 
 icon = null; 
 * @return The set of dependencies of the given {@code uri}. If no dependency is determined an empty set * is returned. 
 public Command getAddCommand(final Object value) { Command addCommand = null; 
 ((Collection<Object>)targetElement.eGet(esfOwned)).add(myTodo); 
 if (null == directEditor) { 
 * If the view doesn't exist it creates the node thanks to the {@link IStereotypeViewFactory } Class. 
 assertThat(messages.size(), is(2)); ChangeMessage lastMessage = messages.get(1); 
 @Nullable private final CTFStreamInput fStreamInput; @NonNull private final CTFStreamPacketOutputWriter fStreamPacketOutputWriter; @NonNull private final File fOutFile; 
 } }); 
 EasymportJob job = new EasymportJob( this.selectRootPage.getSelectedRootDirectory(), this.selectRootPage.getSelectedWorkingSets(), this.selectRootPage.isConfigureAndDetectNestedProject()); EasymportJobReportDialog dialog = new EasymportJobReportDialog( getShell(), job); 
 } throw new IllegalStateException(String.format( "entry for %s:%d not in table", //$NON-NLS-1$ e.pack, Long.valueOf(e.offset))); 
 throw new IOException("could not build REST String", e); 
 return checkNotNull(b.toString()); 
 } 
 public void testGzipImport() { final String traceType = "Test trace : TMF Tests"; final String tracesNode = "Traces [1]"; /* * Actual importing */ 
 return "Javadoc documents"; 
 if (provider.getProvider().supports(descriptor, target)) { 
 if(null != getTableManager() && null != getTableManager().getTable() && null != getTableManager().getTable().eResource()){ 
 WorkspaceFile fileObject1 = (WorkspaceFile) o1; WorkspaceFile fileObject2 = (WorkspaceFile) o2; Integer count1 = Integer.valueOf(fileObject1.getCount()); Integer count2 = Integer.valueOf(fileObject2.getCount()); return count1.compareTo(count2); 
 // Draws our own background to avoid overwriting the bar. 
<|del|> 
 private static boolean regenerate = false; 
 Matcher attributesRef = ATTRIBUTE_TOKEN_PATTERN.matcher(line); 
<|del|> 
 * Copyright (c) 2010, 2015 THALES GLOBAL SERVICES 
<|del|> 
 if (class1.isArray() && class2.isArray() && class1.equals(class2)) { 
 if (!field.getFields().isEmpty()) { 
 protected CompletionProposal buildProposal(final String proposal, final ContentAssistContext context) { 
 * Francois Le Fevre (CEA LIST) francois.le-fevre@cea.fr - Initial API and implementation 
 } catch (MalformedURLException e) { T.racer().error("Bundle entry url for image could not be parsed, url was: " + imageFilePath, e); 
 * href="https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-input">SubmitInput</a> 
 * Copyright (c) 2005, 2015 IBM Corporation and others. 
 List<View> bracesList = testHelper.getAllBraceCompartment(elementView); Assert.assertNotNull("The braces list is null", bracesList); Assert.assertEquals("There should have as many Brace Compartments as applied Stereotypes", expectedNumbersOfBrace, bracesList.size()); 
 Assert.assertTrue(NLS.bind("The model of {0} should be a View", objectName), editPart.getModel() instanceof View); 
<|del|> 
 handle = OS.gtk_radio_menu_item_new (group); if (handle == 0) error (SWT.ERROR_NO_HANDLES); 
 sections = FluentIterable.from(Arrays.asList(sectionContainer.getChildren())) .filter(Section.class) .toList(); 
 } lastStartTime = time; 
 /** * Instantiate an annotation with the comment and its textual representation shown in the document * * @param comment * @param formattedComment */ 
<|del|> 
 * @author Alexandre Montplaisir * @since 1.1 
<|del|> 
 value = "Returns true if the current String is equals to the String \"b\" without considering case in the comparison.", 
 } updateModel(null); 
 void onComplete(LatencyAnalysis activeAnalysis, ISegmentStore<ISegment> data); 
 @Param(name = "o1", value = "The object to compare for equality"), 
 private static final String PREFERENCES_DESCRIPTION = "Preferences for the refactoring resolution"; 
import org.eclipse.egit.gitflow.ui.Activator; 
 if (fSegmentArray == null) { return; } 
 private IValueChangeListener<Object> listener = new IValueChangeListener<>() { 
 return haveRepositories(resources); 
 assertTrue("The drop shadow border should have been recreated.", ((AbstractDiagramElementContainerEditPart) part).getMainFigure().getBorder() instanceof AlphaDropShadowBorder); 
 * Contributors: * Boeing - initial API and implementation *******************************************************************************/ 
 * See the requirement <b>{@papyrus.req org.eclipse.papyrus.sysml14#Req012}</b>. 
 * Copyright (c) 2010, 2015 THALES GLOBAL SERVICES. 
 super(MessageFormat.format(Messages.ShiftDirectSubExecutionsOperation_operationName, deltaY)); 
 * {@link #setNewPointList(PointList)} method. 
<|del|> 
<|del|> 
 * Copyright (c) 2007, 2015 THALES GLOBAL SERVICES. 
<|del|> 
 SubMonitor subMonitor = SubMonitor.convert(monitor, 4); 
 SubMonitor subMonitor = SubMonitor.convert(monitor, 1); 
 SubMonitor subMonitor = SubMonitor.convert(monitor, 4); 
 * Find test properties from various sources in order of priority. 
<|del|> 
 String nsURI = ePackage.getNsURI(); if(nsURI != null && !nsURI.trim().isEmpty()){ URI uri = EcoreUtil.getURI(ePackage); 
 } else if ("text-decoration".equals(rule.name) && rule.value.equalsIgnoreCase("underline")) { //$NON-NLS-1$ //$NON-NLS-2$ continue; 
 for (EClass type : types) { if (type.isSuperTypeOf(((EObject)child).eClass())) { result.add((EObject)child); break; } else if (type.isInstance(child)){ result.add((EObject)child); } 
 * "always works", but in JetS3t both encryption and decryption use non-IV 
 public void testControlledPackagedWithDiagram() throws Exception { setupTestControlledPackagedWithDiagram(); 
 public static String LatencyScatterGraphViewer_compactTitle; 
 * Graph consumer, that maintains the state of a graph created by a third party. 
 // Equivalent to "[0.5.0,)" 
 public static final String EXPORT_ICON_FILE = "icons/elcl16/export_button.png"; //$NON-NLS-1$ 
 /* simplified link */ src.linkVertical(dst).setType(inV.getType()); 
 node.setAttribute("type", Integer.toString(getType())); //$NON-NLS-1$ 
 private static final String MyTaskWorkDefId = "WorkDef_Task_Test_Review"; 
 * Copyright (c) 2007, 2015 THALES GLOBAL SERVICES. 
 * Copyright (c) 2007, 2015 THALES GLOBAL SERVICES. 
 /** * The BitmapIndex for this BitmapBuilder. * * @since 4.2 */ 
 // no client 
 private Map<String, String> environment = new HashMap<>(); 
 // Manual complementary modification might be required for version // in [3.1.0, 3.1.3[ 
 label = (node.isNot() ? NOT : EMPTY_STRING) + node.getNodeName(); 
<|del|> 
 Activator.getDefault().logError("TimeZone " + timeZones[i] + " does not exist.", e); //$NON-NLS-1$ //$NON-NLS-2$ 
 @NonNull private StagingState staged = StagingState.NOT_STAGED; 
<|del|> 
 boolean doubleClickEnabled = true; // see getDoubleClickEnabled 
 private static final int A1_DIFFS_NB = A1_PKGNODECHANGES_NB + A1_CLASSNODECHANGES_NB + A1_LISTNODECHANGES_NB + A1_EDGECHANGES_NB + A1_ELTCHANGES_NB + A1_ASSOCHANGES_NB; 
<|del|> 
<|del|> 
 * Copyright (c) 2010, 2015 THALES GLOBAL SERVICES and others. 
 * Copyright (c) 2010, 2015 THALES GLOBAL SERVICES and others. 
 "System property 'git_repo' not specified, using current directory: " 
 * Copyright (c) 2016 Ericsson 
 commentList = new ArrayList<IComment>(); for (CommentAnnotation annotation : annotationInput.getAnnotations()) { if (reviewItem == null) { 
 /** * Batch the commit with next proposal, which generates less network * use, but may provide slower consistency on the replica. */ 
<|del|> 
<|del|> 
 for (ReceiveCommand cmd : createCmds) { ObjectId id = cmd.getNewId(); String name = cmd.getRefName(); cmds.add(new ReceiveCommand(id, ObjectId.zeroId(), name)); 
 * A request made to a replica, and its result. 
 String message = this.getDefaultMessage(result); 
 * Copyright (c) 2008, 2016 QNX Software Systems and others. 
 return urlSuffix; 
 * The row index of the cell to copy. 
<|del|> 
 ControlFlowEntry entry = (ControlFlowEntry) event.getSelection(); 
 return Long.valueOf(artifactObject.getArtId()); 
 project = Adapters.adapt(item, IProject.class); 
 OseeLog.log(AbstractAtsConfigQueryImpl.class, Level.SEVERE, "Null found in results"); 
 messageBox.setMessage("Reversed to new UML model in reversed_models/ folder of project " + project.getName()); // $NON-NLS-1$ 
 * @since 4.3 
<|del|> 
 cp.setFilePath(path); 
 * Select Git Flow feature branches. 
 return Boolean.getBoolean("eclipse.show.wrapByDefaultPreference"); //$NON-NLS-1$ 
 * Strategy for unassociated file types: 
<|del|> 
<|del|>
 TaskRepositoriesExternalizer.ATTRIBUTE_VERSION, "", "1"); //$NON-NLS-1$ //$NON-NLS-2$ 
 treeWalk = new TreeWalk(reader); 
 @Nullable String getSymbolText(long address); 
 private final ISymbolProvider fProvider; 
<|del|> 
<|del|> 
<|del|> 
 private static final String DOWN_BUTTON_ICON = "/icons/Down_12x12.gif";//$NON-NLS-1$ 
 * Celine JANSSENS (ALL4TEC) celine.janssens@all4tec.net - Initial API and implementation 
<|del|> 
 * Copyright (c) 2007, 2018 THALES GLOBAL SERVICES and others. 
 * @noimplement This interface is not intended to be implemented by clients. 
 * Get this view property section from the settings. The property section is * per view ID. 
 protected ILaunchConfiguration getConfiguration() { 
 if(event.getDeletedText().isEmpty()) 
 if (!SideEffect.NULL_SIDE_EFFECT.equals(sideEffect)) { sideEffects.add(sideEffect); } 
<|del|> 
 if (pattern.matcher(fTrace.getName()).find()) { 
 protected void createMainControl(Composite parent, IEEFFormContainer formContainer) { FormData buttonFormData = new FormData(); buttonFormData.left = new FormAttachment(0, LABEL_WIDTH); 
 public void createControls(final Composite parent) { 
 final Group group = new Group(parent, SWT.NONE); 
 final TableDisplayStyle style = (TableDisplayStyle) tableConfiguration.getStyle(NattablestylePackage.eINSTANCE.getTableDisplayStyle()); if (null != style) { 
<|del|> 
 throw new IllegalStateException("View requires an analysis module"); //$NON-NLS-1$ 
 public void eventDispatched(IExpressionChangedDMEvent e) { synchronized(fListeners) { for (IAddressInfoUpdateListener listener : fListeners) { listener.handleAddressInfoUpdate(EventType.VALUE_CHANGED, null); } 
 public static synchronized DefaultEventLayout getInstance() { DefaultEventLayout inst = INSTANCE; 
 public void tearDown() { 
 /** Time Graph View part listener */ private TimeGraphPartListener fPartListener; /** Action for the find command. There is only one for all Time Graph views */ 
 IStatus status= new Status(IStatus.ERROR, JavaScriptUI.ID_PLUGIN, IStatus.OK, info, e); 
 fInstallLocation = installLocation; 
 private int pauseDepth; 
<|del|> 
 private void compile(ICompilationUnit[] sourceUnits, boolean lastRound) { 
 if (null == diagramView) { 
 IValue value = getValue(); assertInstance(value, FloatingPointValue.class); 
 finalResult.append(CRLF).append(CRLF).append(i+1).append(PARENTHESES).append(childMessage); 
 public void testHeadingContainingEmphasisStyle() { 
 Integer tid; try { tid = KernelTidAspect.INSTANCE.resolve(event, true, fMonitor); } catch (InterruptedException e) { return; } 
 public static String IS_DRAFT = "isDraft"; //$NON-NLS-1$ 
 @Nullable Throwable getFailCause(); 
 /** * Lami 'disk' value. * * A disk can be "sda". It may contain partitions. * * @author Philippe Proulx */ 
<|del|> 
 * Aspect for process names 
 private static final LamiBoolean TRUE = new LamiBoolean(true); private static final LamiBoolean FALSE = new LamiBoolean(false); public static LamiBoolean instance(boolean value) { return (value ? TRUE : FALSE); } 
 * Copyright (c) 2015, 2016 EfficiOS Inc., Alexandre Montplaisir 
 * A disk partition is something like "sda2". 
 * Get a list of all the aspect of the X axis. 
 ICPPConstructor constructor = getImplicitlyCalledCtor(declarator); if(constructor != null) { 
 } catch (CoreException e) { 
 // ------------------------------------------------------------------------ // Listeners // ------------------------------------------------------------------------ 
 ActivationRecord record = new ActivationRecord(parameters, implicitThis); // We start at arguments[1] because arguments[0] is the function's evaluation. 
 return record.getVariable(declaredBinding).computeForFunctionCall(record, context).getValue(context.getPoint()); 
 public Collection<?> getTreeContentProviderChildren(EObject self) { 
<|del|> 
 if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); PathData result = getPathDataInPixels(); result.points = DPIUtil.autoScaleDown(result.points); return result; } PathData getPathDataInPixels() { 
 checkbox.setText(getName(folder)); checkbox.setToolTipText(getToolTipText(folder)); 
 final BasicArrowButton incrementButton = findArrowButton("Spinner.nextButton"); 
 assertEquals(spinner.getMaximum(), 1000); 
<|del|> 
 try { isServerInfoReady(); 
 public abstract void enableEvents(CommandParameter param, List<String> eventNames, boolean isKernel, String filterExpression, List<String> excludedEvents, IProgressMonitor monitor) throws ExecutionException; 
 public static List<State> getStates(Region region) { List<State> states = new ArrayList<>(); 
 Collection<Profile> profiles = new ArrayList<Profile>(); 
 } super.tearDown(); 
 private DView dView; /** * Create a new query. * * @param dView * the {@link DView} to query. */ public DViewQuery(DView dView) { this.dView = dView; 
 } else { 
 public static final String INVALID_MARKER_MESSAGE = "Marker can only be used in min or sum aggregator context."; public static final String EXACTLY_ONE_MARKER_MESSAGE = "Exactly one variable must be marked for a min or sum aggregator."; 
 * Contributors: * Boeing - initial API and implementation *******************************************************************************/ 
 * @return the path to the temp directory used by LFS. Will be * "<repo>/.git/lfs/tmp" 
 } 
 if (null != modelProperty) { // Bug 433169: The widget may be used without an Observable Value (setValue + getValue) if (null != modelProperty.getValue()) { 
<|del|> 
<|del|> 
 context.set(IDEWorkflow.CTX_REPORT_PROCESSORS, new ExtenstionPointNeedinfoProvidersCreationFunction()); 
 * Ericsson - Initial API and implementation 
 private WildcardMode allowMismatchedWildcards; 
<|del|> 
 numDigits += Messages.Utils_ClockCyclesUnit.length(); } else if (fTimeProvider.getTimeFormat() == TimeFormat.RELATIVE) { numDigits += 2; // " s" 
<|del|> 
 display.getExceptionHandler ().accept (runtimeException); } catch (Error error) { Display display = Display.getCurrent (); if (display == null) { throw error; } display.getErrorHandler ().accept (error); 
 IConsumerAggregator aggregator = fXAggregator; if (aggregator != null) { fSeries.stream().map(s -> s.getXConsumer()).forEach(aggregator::accept); 
 public DescriptorsInformation(Collection<IDataChartDescriptor<?, ?>> descriptors) { 
 * Overloaded constructor with a predicate. 
 public final String sectionTitle; 
 /* Add the object to the list of consumed objects */ // FIXME: The object is kept for the signals to work correctly, but this // may cause OutOfMemoryExceptions if we keep all the consumed objects. 
 * contributed by the <code>org.eclipse.ui.workbench.texteditor.hoverProvider</code> extension point for 
 * Suggests query evaluation hints regarding a query. The returned hints reflects the default hints of the * query engine merged with the hints provided by the pattern itself. These can be overridden via specific * advanced API of the engine. * 
 .compile("\\x1b\\[(?<colorcode>\\d{1,2})m(?<content>.*)"); //$NON-NLS-1$ 
 * Copyright (c) 2012, 2016 THALES GLOBAL SERVICES. 
 */ @Override 
 * @since 1.3 
<|del|> 
<|del|> 
 * @return <code>true</code> if any factory was registered for the name 
 * an {@link InputStream} providing the original content 
<|del|>
 int buttonBackground = -1; // we need our own field, because setting Control.background causes two colored pixels around the button. 
 "Trying to cancel " + refreshJob.getName() + " job"); //$NON-NLS-1$ //$NON-NLS-2$ } 
 InputStream is = response.getResponseEntityAsStream(); 
 * @since 4.6 
 private boolean expectedToBeChecked; 
 Preconditions.checkState(credentials != null, "Authentication requested without valid credentials"); 
 private static final List<IHintedType> types = ImmutableList.of(PROTOCOL_MESSAGE_PARAMETER_CREATION_WITH_UI, EXTERNAL_PORT_CREATION_WITH_UI); 
 StatusHandler.log(new Status(IStatus.ERROR, "org.eclipse.mylyn.commons.sdk.util", NLS.bind("TestClassRunnerForFixture: Testclass {0} has no public constructor", //$NON-NLS-1$ getTestClass().getName()), e)); return; 
<|del|> 
<|del|> 
 spinner.addSelectionListener(widgetSelectedAdapter(e -> { 
 public void testAddReviewerThenRemoveReviewer() throws Exception { 
 if (!Boolean.parseBoolean(actualFixture.getProperty(IBugzillaRestConstants.API_KEY_ENABLED_PROPERTY))) { 
<|del|> 
 protected void initTitleArea(EObject model) { 
 assertEquals(errorMessage(2, 5), 6, groupItem.getItems().length); 
<|del|> 
 int radioOrCheckTextPadding = DPIUtil.autoScaleUpUsingNativeDPI(16); 
 tableViewer.setItemCount((int) Math.min(Integer.MAX_VALUE, contentProvider.getSegmentCount())); 
 LEAF((byte) 2); 
 populate(size, fuzz, fSegStore, 0, getSegmentStoreSize() / 2); 
 private final OutputStream dst; private final ExecutorService copier; 
 * Copyright (C) 2016, Google Inc. 
<|del|> 
 for (int i= 0; i < packageFragmentRoots.length; i++) addAllCus(collector, packageFragmentRoots[i]); 
 * Dirk Fauth <dirk.fauth@googlemail.com> - Bug 488234 * Mickael ADAM (ALL4TEC) mickael.adam@all4tec.net - Bug 502560: add drag to diagram support 
 } else if (element instanceof IFile) { // This file is not in a ModelingProject (check in // <possibleChildren> and <triggerPoints> of // "org.eclipse.ui.navigator.navigatorContent" of plugin.xml) 
 final List<T> children = getItemsInGroup(groupByObject); 
 protected final void tryInsertAtNode(E interval, int depth) { N targetNode = getLatestBranch().get(depth); 
 * Removes the given lock status changed listener from the list of all lock status changed listeners.. 
 private void setButtonsEnabled(boolean enable) { 
 public List<IProject> getDependentProjects(IBuildConfiguration buildConfiguration) throws CoreException { IProject input = buildConfiguration.getProject(); 
 builder.append(" * Copyright (c) 2017 Obeo.").append(System.lineSeparator()); //$NON-NLS-1$ 
 UMLRTPort rt = UMLRTPort.getInstance(port); 
 schedule(interval); 
 * Overridden to refresh text after set of font and font color to be taken into account. 
 public static String responseHeader(final HttpConnection c, final String headerName) throws IOException { return c.getHeaderField(headerName); 
 pw.addObject(pool.lookupAny(id, type)); long objSize = oldRevIdx.findNextOffset(offset, maxOffset) - offset; estimatedPackSize += objSize; 
 * Returns true if the file at the given path is in sync with the index. Returns false if the file has already * been tested and might be out-of-sync. Returns null if its status is unknown and needs to be tested. 
 public static final Pattern UNLOAD_PATH_PATTERN = Pattern.compile("^/unload/([a-zA-Z0-9]+)(.*)"); 
 fMap = HashBiMap.create(); 
 image.alphaInfo_100 = new AlphaInfo(); 
<|del|> 
 for (File fileEntry : entries) { takeSnapshot(snapshot, fileEntry, false); 
 ArrayList<T> result = new ArrayList<>(collection); 
 * Copyright (c) 2017 École Polytechnique de Montréal 
<|del|> 
 private PreferencesHint checkDiagramWorkenchPart(final IEditorPart editorPart) { 
 return editPart instanceof IDiagramElementEditPart && super.shouldBeDecorated(editPart); 
 * Atos Origin - Initial API and implementation * Fanch BONNABESSE (ALL4TEC) fanch.bonnabesse@all4tec.net - Bug 512207 
 return getMatchingPaths(objId, tf, true); 
 propertyToLabelMap.put("lastName", "Lastname"); propertyToLabelMap.put("gender", "Gender"); propertyToLabelMap.put("married", "Married"); propertyToLabelMap.put("birthday", "Birthday"); 
<|del|> 
 addButton(buttonsComposite, Messages.UI_SessionEditor_new_semantic_model_action_label, () -> { 
 r.write(','); 
<|del|> 
 long length = attachment.getLength(); 
 * Simple POJO that contains information needed to display decoration. 
 Optional<List<DecorationDescriptor>> decorationDescriptorsOptional = decorationDescriptorProvider.getDecorationDescriptors((IDiagramElementEditPart) editPart, session); if (decorationDescriptorsOptional.isPresent()) { decorationDescriptors.addAll(decorationDescriptorsOptional.get()); 
 * @return The list of disabled trace types 
 IStructuredSelection structuredSelection = fViewer.getStructuredSelection(); IStructuredSelection expectedSelection = new StructuredSelection(expected); assertEquals("selectionEquals - " + message, structuredSelection, expectedSelection); 
 tabs.values().stream().forEach(ICodeSnippetTab::dispose); 
 public LinearScaleTicks2(DAxis scale) { 
 private PriorityQueue<E> intersecting = new PriorityQueue<>(ITERATOR_QUEUE_SIZE, order); 
 private final Action VIEW_AGGREGATE = new Action(Messages.FlameGraph_AggregateByThread, IAction.AS_RADIO_BUTTON) { 
 /** * Make sure old VSM get the 2 table variables "table" and "line" properly defined inside LabelEditTool definition. * * @author pguilet * @see http://eclip.se/466412 */ 
<|del|>
<|del|> 
<|del|> 
 } // Third parameter is not used by implementation // Determine data that needs to be visible 
 private Point computeSize(Composite parent, int wHint, int hHint) { 
 * mwenz - Bug 459386 - Refresh Connection when getDiagramBehavior().refreshRenderingDecorators(PEInstance) is called * Tamas Borbas - Bug 515645 - Missing API to turn off auto refresh 
 return services.getAttributeResolver().getSoleAttributeValue(artifact, AtsAttributeTypes.AtsId, 
 if (null != resource) { 
 private volatile boolean fCanExecute = true; 
 if (overriddenImage != null) { 
 return fMinEnd; 
 * Remove an analysis element that is combined in the compound element. 
 throw new IllegalStateException( "CrashingCommitMessageProvider fails on purpose."); 
 * @author Neil Mackenzie 
 /** * * @see org.eclipse.papyrus.infra.emf.nattable.manager.axis.AbstractSynchronizedOnEStructuralFeatureAxisManager#getFeaturesValue() * * @return */ 
 fTraceElements = new ArrayList<>(Arrays.asList(traces)); 
 if (superClass.equalsIgnoreCase(PHPModelUtils.getFullName(superType))) { 
 mappingFiles.add(mappingFile); 
 * can get them from the supplementary file. 
 LOG.debug("Skipping bean candidate '{}' because it has no empty or injectable constructor().", ci.name()); 
 Set<@NonNull Integer> cpus = cpuFilter.getCpu(); Map<String, Long> cpuUsageMap = fModule.getCpuUsageInRange(cpus, start, end); 
 if (keysChangedProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS); OS.g_signal_connect (OS.gdk_keymap_get_default (), OS.keys_changed, keysChangedProc, 0); 
 private InterpretedExpression interpretedExpToTest; 
<|del|> 
 /* Test data model */ WaitUtils.waitUntil(json -> isChartDataValid(chart, json), "resources/disk2-res100.json", "Chart data is not valid"); 
 for (char character : chars) { if (character == '\\') { 
 html.append(String.format("<h1>Features for branch [%s]</h1>", 
 if (sourceName == null || SemanticUtil.isAutoOrDecltype(fSelectedText)) { 
 * Copyright (c) 2016, 2017 Red Hat Inc. and others 
 selectionMenu.addMouseTrackListener(new SelectionMenuMouseTrackListener(DefaultNavigationMenu.this, selectionMenu, subMenus, umlElement)); 
 * @since 3.14 
 * Creates a new object for creating a Java abstract syntax tree (AST) following the specified set of API rules. The * parser will use the latest supported JLS level. * 
 extractedFolder.create(IResource.FOLDER, true, monitor); 
 private static String pathToString(File file) { final String path = file.getPath(); return SystemReader.getInstance().isWindows() ? path.replace('\\', '/') : path; 
 if (monitor.isCanceled()) { return; } 
<|del|>
 public static boolean isPhotonPlatformOrLater() { 
 private final Map<EClass, LinkedHashSet<Template>> templates = new LinkedHashMap<EClass, LinkedHashSet<Template>>(); 
 WeakReference<INavigatorContentService> ref = iter.next(); INavigatorContentService contentService = ref.get(); 
 return transitionMap.containsKey(state) && !transitionMap.get(state).isEmpty(); 
 * Represents an xml analyses output 
 oid = r.getObjectId(); } 
 * @since 4.11 
 * Copyright (c) 2018 École Polytechnique de Montréal 
 editor.bot().getDisplay().asyncExec(() -> { viewer.setActiveTool(toolEntry); }); 
 contentServerConn.setDoOutput(true); 
 for (final Ref r : set) { 
<|del|> 
<|del|> 
 return new TimeGraphState(startTime, duration, s); 
 final VView reloadView = loadView(path); if (reloadView != null && !viewIsResolved(reloadView)) { EcoreUtil.resolveAll(reloadView); 
 int status = tcEvent.getValue(); 
 * Copy a resource in the file system. 
<|del|> 
 // TODO: Find another mechanism to update the view rather than listeners, so // that we don't need to expose the analysis to the view 
 * @return the default color to use for displaying hyperlinks, or * <code>null</code> if the color definition does not exists. 
 inputStream = provider.getInputStream(); if (inputStream != null) { inputStream = new FilterInputStream(inputStream) { 
 if (shouldDeleteWorkingDir && !projectsToDelete.isEmpty()) { 
 if (fRoot != null && os != null && !os.isEmpty()) { 
 protected Map<String, BiPredicate<org.eclipse.tracecompass.internal.tmf.core.model.timegraph.IPropertyCollection, @NonNull Function<org.eclipse.tracecompass.internal.tmf.core.model.timegraph.IPropertyCollection, @NonNull Map<@NonNull String, @NonNull String>>>> computeRegexPredicate() { 
 Diff diff = null; if (eObject instanceof Diff) { diff = (Diff)eObject; } 
 shell.setLocation(getFilterBounds()); 
 private static final String XML_FILTER_EXTENSION = "*.xml"; //$NON-NLS-1$ 
 * * @see UploadPack#setProtocolV2Hook(ProtocolV2Hook) 
 tipImage = new TipImage(bundle.getEntry("icons/48/tips.png")); 
 * @return environment variables in the format name=value or null 
 if(event.getSource() == serverChoice && event.getProperty() == FieldEditor.VALUE) { String changedLSLocation = CPPStreamConnectionProvider.getDefaultLSLocation((String) event.getNewValue()).getAbsolutePath(); if(changedLSLocation != null) { serverPath.setStringValue(changedLSLocation); } 
 * Thomas Singer - initial API and implementation 
 if (map == null) { 
 * and is available at * https://www.eclipse.org/legal/epl-2.0/ * * SPDX-License-Identifier: EPL-2.0 
 default: Activator.getDefault().logError(MessageFormat.format("Wrong connection segment index ({0}) provided to AdjustConnectionCommand!", index)); 
<|del|> 
 * @param timeout * number of seconds to wait (with no data transfer occurring) * before aborting an IO read or write operation with this * remote. 
 @SuppressWarnings("UnsynchronizedOverridesSynchronized") // This is only used in tests and is thread-safe 
 * If <code>true</code>, dirty worktree files may be overridden. If * <code>false</code> dirty worktree files will not be overridden in order 
 // Do nothing 
<|del|> 
 * @param <D> Specific DataObject derived type, that is handled by this reader 
 /** * Invoke current operation asynchronously on VPP * * @return context id of this request. Can be used to track incomming response */ int send(JVpp jvpp); 
<|del|> 
 VxlanGpeAddDelTunnel.remote = remote; 
 void onError(VppCallbackException ex); 
 private void whenL2InterfaceVlanTagRewriteThenFailure() throws ExecutionException, InterruptedException, VppInvocationException { doReturn(TestHelperUtils.<L2InterfaceVlanTagRewriteReply>createFutureException()).when(api) .l2InterfaceVlanTagRewrite(any(L2InterfaceVlanTagRewrite.class)); 
<|del|> 
 private static Boolean isModification(@Nonnull final DataTreeCandidateNode currentCandidate) { 
 public interface DataObject1 extends DataObject { InstanceIdentifier<DataObject1> IID = InstanceIdentifier.create(DataObject1.class); 
 .filter(mapping -> EidConverter.compareEids(mapping.getEid(), eid)) 
 request.locatorSetName = locatorSetName.getBytes(UTF_8); 
<|del|> 
 // Ex. Key for MapResolver contains Ipv4Address as value but we translate addresses from binary data to Ipv4AddressNoZone private boolean addressesEqual(final IpAddress left, final IpAddress right) { 
 // Reads resources from provided resource path 
<|del|> 
<|del|> 
 checkArgument(Identifiable.class.isAssignableFrom(id.getTargetType()), "Node %s is not keyed, use addStructuralReader()", id.getTargetType()); add(GenericListReader.createReflexive(id, builderType, staticKeys)); 
 verify(aclApi, never()).aclDel(any(AclDel.class)); 
 augData.map(Interface1::getIpv6).map(Ipv6::getAddress).map(List::isEmpty).orElse(true); 
 private static Set<String> readFromFolder(final URL folderUrl) { 
 LOG.debug("NETCONF TCP disabled, skipping initalization"); 
 private final List<YangType> yangTypes; 
 private DataObjectUpdate(@Nonnull final InstanceIdentifier<?> id, 
 private InterfaceNameOrIndex getIfcName(final SwInterfaceEvent swInterfaceEventNotification) { 
<|del|> 
<|del|> 
public class FibTableRequest implements AddressTranslator, JvppReplyConsumer { 
 // noop 
<|del|> 
 builder.setHostInterfaceName(toString(swInterfaceTapV2Details.devName)); 
<|del|> 
<|del|> 
<|del|> 
 result = prime * result + (confirmed ? 1231 : 1237); 
<|del|> 
 } @Test public void failCase5() { VerifierResult result = hostNameVerifier.verify("1.2.3.4:80"); Assert.assertFalse(result.passed()); } 
<|del|> 
 assertEquals(sub.ex().getClass(), NodeCacheOrphaned.class); 
<|del|> 
 * Convert the string extracted from JComboBox to a string to be printed * out. * Static because will be used in compareTo(beforeTask, afterTask) in 
 /** this function retrieves the color that is being allowed on the view. 
<|del|> 
 zk.add(paths.getHostPath(hostIdentifier), null /*data*/, CreateMode.PERSISTENT); 
<|del|> 
<|del|> 
 // Create a map entry message. 
 throw new VtepRetrievalException("logical switch " + newId); 
 log.info("Host {} registered to NSDB", hostId); 
<|del|> 
 private void showFilterCategoriesDialog() { FragmentTransaction _f_transaction = getFragmentManager().beginTransaction(); DialogFragment _f_dialog = (DialogFragment)getFragmentManager().findFragmentByTag("FilterDialog"); if(_f_dialog != null) { _f_transaction.remove(_f_dialog); 
 System.out.println("Ich bin ein Esel :)"); 
 private Integer parseTunnelKey(Row<GenericTableSchema> row) { 
 System.out.println(input); 
<|del|> 
<|del|> 
 } //this is deal with sell order. 
 private ArrayList<Order> sortBuyOrder(ArrayList<Order> buyOrders){ 
 } 
 for (Order currentOrder : ordersPlaced) { if (((currentOrder instanceof BuyOrder) && (newOrder instanceof BuyOrder)) || ((currentOrder instanceof SellOrder) && (newOrder instanceof SellOrder))) { if (currentOrder.getStockSymbol().equals( 
<|del|> 
public class Trader { 
 market.addOrder(theOrder); 
 // TODO Auto-generated catch block e.printStackTrace(); 
 market.printStocks(); 
 for (Order currentOrder : buyOrdersList) { 
 // Create 14 traders 
 //super(); 
 //Trader 8's buy will throw exception 
 private Market getM() { 
<|del|> 
 @JsonIgnore public void update(Bridge from) { this.id = from.id; 
 private void drawLine(Canvas canvas, Line line) { 
 * Copyright 2015 Midokura SARL 
 public void updateSslTermination(LoadBalancer loadBalancer, ZeusSslTermination sslTermination) throws MalformedURLException, EntityNotFoundException, DecryptException, InsufficientRequestException, RollBackException { 
 State.HostState.Builder builder = State.HostState.newBuilder(); 
 * @return A list of DhcpSubnet6 objects. 
 return absoluteUri(ResourceUris.DHCPV6_HOSTS, clientIdToUri(clientId)); 
<|del|>
 * Copyright 2015 Midokura SARL 
 public DpdAction dpdAction; 
 int a = 40, b = 30; 
 MenuButton(String nameOfButton) { text = new Text(nameOfButton); 
<|del|> 
 if (y == -1) { 
 text.setFont( Font.loadFont("file:resourses/fonts/20th_century_font.ttf", 20)); 
 GridOperator.traverseGrid((xPosition, yPosition) -> { Location location = new Location(xPosition, yPosition); 
 bricks[i][j].getRightBoundary() + ball.getRadius(), ball.getPositionY(), -ball.getDx(), ball.getDy()); 
 private final Properties PROPERTIES = new Properties(); 
 public static final float UNFILLED_FIELD = -1.0f; 
<|del|> 
 * Copyright 2016 Midokura SARL 
<|del|> 
 .add("subnetIds", subnetIds) 
 } for (; i < ifrnName.length; i++) { ifrnName[i] = 0; } 
<|del|> 
 major = Integer.valueOf(parts[0]); 
 resource = createProxy(KRAInfoResource.class); 
 RequestId recoveryID, KeyId keyID, 
ort java.util.Scanner; 
 boolean alnRange = a>= 10 && a <= 20; boolean blnRange = b >= 10 && b <= 20; 
 if ((values == null) || (values.length == 0)) { 
 // object and are not Junit assert. This ways it manages the async aspect of the test the right way. 
 } catch (NoSuchAlgorithmException | NoSuchProviderException e) { throw new RuntimeException(e); 
 CMS.getUserMessage("CMS_KRA_INVALID_PRIVATE_KEY") + ": " + e, e); 
 public String getTxtProfile() { return mTxtProfile.getText(); 
 public String getText() { 
Copyright (C) 2009 The Android Open Source Project 
 public static final ResultDeserializer<Double> DOUBLE_INSTANCE = 
<|del|> 
<|del|> 
 dbAccounts.suggestByFullName(userName, userName + "\u9fa5", 10), db.accountExternalIds().suggestByEmailAddress(userName, userName + "\u9fa5", 10), 
<|del|> 
<|del|>
<|del|>
 static { CmdLineParser.registerHandler(PatchSet.Id.class, PatchSetIdHandler.class); 
<|del|> 
 @Deprecated Account.Id oldAccountId; 
 * 
 int limit = (int) Math.min( mx / 4, // don't use more than 1/4 of the heap. 2047 << 20); // cannot exceed array length 
 if (state.getRefRights(at).isEmpty()) { return isProjectStateValid(user, at, state); } else { return isRefStateValid(user, at, state); } 
 private final Helper helper; 
 if (inquote || ip == commandLine.length()) 
public class InheritedRefRight { 
 } else { 
 AbstractAccess<T, K> { private static final int MAX_TRIES = 10; 
<|del|> 
 @Column(id = 7) protected Timestamp lastSeen; protected ActiveSession() { } 
 } }); } 
 this.remotePeerProvider = remotePeerProvider; this.dbProvider = dbProvider; 
<|del|> 
Copyright (C) 2009 The Android Open Source Project 
 writeEnum(out, getChangeType()); writeEnum(out, getPatchType()); 
<|del|> 
<|del|> 
 @Inject private TransferConfig config; 
 if (!project.getId().equals(wildProject.getId())) { 
<|del|> 
 @Option(name = "--json", aliases = "-j", usage = "read review input json from stdin") 
 result.add(new ProjectData(p.getNameKey(), p.getDescription(), canBeDeleted)); 
<|del|> 
<|del|> 
Copyright (C) 2011 The Android Open Source Project 
 @Option(name = "--group", aliases = "-g", metaVar = "INCLUDEDGROUPS", usage = "initial set of groups to be included in the group") 
 patchesList.addItem(Util.C.baseDiffItem()); 
 log.error("Error updating reviewers on change " + changeId, err); writeError("fatal", "internal error while updating " + changeId); 
<|del|> 
 p.put("project", URL.encodeQueryString(project.get()).replace("%2F", "/")); 
 dbInjector = createDbInjector(SINGLE_USER); 
public class PRED_change_branch_1 extends Predicate.P1 { 
 * 'commit_delta'(+Regex, -ChangeType, -NewPath, -OldPath) 
 for (final String reviewer : reviewers) { final Account account = accountResolver.find(reviewer); 
 T r = getOrNull(engine); if (r == null) { String msg = key.toString(); throw new SystemException(msg); 
<|del|> 
 logError( String.format( "Command %s on %s:%s not completed: %s", create.cmd.getType(), project.getName(), create.cmd.getRefName(), createChangeResult)); 
 public void gerritConfig(final AsyncCallback<GerritConfig> callback); 
 * @param tableName table to rename the column in. 
 public static boolean hasOnlyValidCharacters(String value) { 
 || (newParent == null && !currentUser.getCapabilities() 
 UrlModule(GerritOptions options, AuthConfig authConfig) { this.options = options; this.authConfig = authConfig; 
 private boolean processResult(final AccountGroup.Id groupId, final GroupMemberResult result, final boolean add) { 
 public InvalidNameException(String invalidName) { super(MESSAGE + ": " + invalidName); 
<|del|> 
 public void testInsertNothing() throws OrmException { 
 submitType = defaultSubmitType; state = State.ACTIVE; 
 public List<Project.NameKey> get() throws OrmException { final List<Project.NameKey> r = new ArrayList<Project.NameKey>(); 
 @Assisted String name) { this.createProjectFactory = performCreateProjectFactory; 
 "Unsupported SubmitRecord.Label.status (" + lbl.status + ")"); 
 throw new IllegalStateException( 
 if (isHead(c) || isConfig(c)) { switch (c.getType()) { case CREATE: case UPDATE: case UPDATE_NONFASTFORWARD: autoCloseChanges(c); branches.add(new Branch.NameKey(project.getNameKey(), refName)); break; 
<|del|> 
 if ((change.getStatus() == Change.Status.NEW || change.getStatus() == Change.Status.DRAFT) 
<|del|> 
 * Get all reviewers for a change. 
 @Inject private ApprovalTypes approvalTypes; 
 for (String key : injectedVariables) { 
 table.setWidget(row, C_PROJECT, new ProjectLink(c.getProject().getKey(), c .getStatus())); 
import com.google.gerrit.reviewdb.client.Project; import com.google.gerrit.server.data.AccountAttribute; import com.google.gerrit.server.data.RefUpdateAttribute; 
 private boolean isRebaseTransparent; 
 return Arrays.asList(pluginsDir.listFiles(new FileFilter() { @Override public boolean accept(File pathname) { return pathname.getName().endsWith(".jar"); } })); 
 noCache(res); 
<|del|> 
 public static final String UNKNOWN_USER = "N/A"; public static final String UNKNOWN_SESSION_ID = "000000000000000000000000000"; private static final Object UNKNOWN_RESULT = "N/A"; 
 return key( new HttpServlet() { private static final long serialVersionUID = 1L; 
<|del|> 
 patchKey = id; patchSetDetail = detail; 
 private final SetMultimap<ReviewerStateInternal, Account.Id> reviewers = MultimapBuilder.hashKeys(2).hashSetValues().build(); 
 private void addComment(JiraClientSession jira, String commentMatch, String projectName, String refName, RevCommit commit) throws XmlRpcException { 
<|del|> 
 * If advertised address is specified it should take precedence over the 
<|del|> 
 return currentMethod.get(); } 
 Patch.Key keySideB = new Patch.Key(idSideB, patchKey.get()); 
 protected AbstractPatchContentTable() { 
<|del|> 
 SubmitRecordAttribute sa) { 
<|del|> 
 List<ReloadableRegistrationHandle<?>> getReloadableHandles() { if (reloadableHandles != null) { return reloadableHandles; } return Collections.emptyList(); 
 return (n.endsWith(".jar") && pathname.isFile()); 
 repoManager.list(); // Invoked for flushing the LocalDiskRepositoryManager project list cache 
<|del|> 
 public ImmutableSetMultimap<ReviewerStateInternal, Account.Id> getReviewers( ChangeNotes notes, Iterable<PatchSetApproval> allApprovals) 
 final Map<String, DashboardInfo> dashboards = Maps.newTreeMap(); 
<|del|> 
import static com.google.inject.Scopes.SINGLETON; import static com.google.gerrit.extensions.registration.PrivateInternals_DynamicTypes.registerInParentInjectors; 
import com.google.gerrit.server.project.ChangeControl; import com.google.gerrit.server.util.LabelVote; 
 log.error("Cannot query LDAP to authenticate user", e); 
 this.newCommit = newCommit; 
<|del|> 
 RepositoryDescription desc = access.getRepositoryDescription(); 
 Set<Account.Id> projectWatchers = new HashSet<Account.Id>(); 
 final Map<Account.Id, MemberInfo> members = getMembers(resource.getGroupUUID(), new HashSet<AccountGroup.UUID>()); return Lists.newArrayList(members.values()); 
<|del|> 
 String _oneGroup; 
 for (AccountGroup.UUID g : ids) { in.addGroup(g.get()); 
 for (AccountInfo info : missing.get(account.getId())) { 
 usage = "name of the project to be renamed") 
Copyright (C) 2013 The Android Open Source Project 
 + "\" does not exist or is not visible'."); 
Copyright (C) 2013 The Android Open Source Project 
 lt.setCanOverride(true); 
 "Ref Not Found: %s", ref)); 
 * To signal that deletion of the project is not okay, throw an exception. 
 bind(AllProjectsName.class).toProvider(AllProjectsNameProvider.class); 
 rp.getRevWalk().reset(); if (ctl.canCreate(db, rp.getRevWalk(), obj)) { 
Copyright (C) 2013 The Android Open Source Project 
 RevisionResource baseResource = revisions.parse( resource.getChangeResource(), IdString.fromDecoded(base)); 
 return new PatchListKey(projectKey, oldId, newId, whitespace); 
 /* All patch sets */ 
<|del|> 
 /** Execute merge validation plug-ins */ public static class PluginMergeValidationListener implements 
<|del|> 
 if (id.equals("server")) { return new ConfigResource(); 
<|del|> 
 } if (finishedPushTasksCount < totalPushTasksCount) { return; } 
 JavaScriptObject.createArray().cast(); 
<|del|> 
import com.google.gerrit.server.query.OperatorPredicate; 
 @SuppressWarnings("unchecked") 
 if (checkAndUpdateArrows()) { 
 private final ChangeControl.GenericFactory changeControlFactory; private final Provider<ReviewDb> db; 
 * If this method return {@code true} then this validator will be executed for 
 CommentBox(CommentGroup group, CommentRange range) { this.group = group; 
 downloadSchemes = Arrays.asList(config.getStringList("download", null, "scheme")); 
 anchor.setHref("#" + url); if (anchor == prevLink) { anchor.setHTML(new SafeHtmlBuilder() .append(SafeHtml.asis(Util.C.prevPatchLinkIcon())) .append(SafeHtml.asis(fileName)) .toSafeHtml()); 
 InputStream in = openRobotsFile(); 
 @Override public int hashCode() { int h = startLine; h = h * 31 + startCharacter; h = h * 31 + endLine; h = h * 31 + endCharacter; return h; 
 msg.append(String.format( "%s and install it now", download ? "Download" : "Copy")); 
 showResultSet(rs, false, 0, Identity.create(rs, "TABLE_SCHEM"), Identity.create(rs, "TABLE_NAME"), 
 } 
 setResource(Gerrit.RESOURCES.downloadIcon()); 
<|del|> 
 } catch (RestApiException 
 return i.getAccountId().equals(change.getOwner()); 
 final Set<Account> members = groupMembersFactory 
 Project p = rsrc.getControl().getProject(); for (GroupReference g : suggestAccountGroup( rsrc.getControl().getProjectControl())) { if (suggestGroupAsReviewer(p, g, visibilityControl)) { 
 static void publish(Change.Id id, String revision) { 
 private PatchList readPatchList(final PatchListKey key, final Repository repo) throws IOException, PatchListNotAvailableException { 
 List<TopMenu.MenuEntry> entries = Lists.newArrayList(); 
 } @Override public int compareTo(Id o) { return o.id - this.id; } 
 return Callables.returning(null); 
 RestApi call = ChangeApi.detail(change.legacy_id().get()); ChangeList.addOptions(call, EnumSet.of( revision.equals(change.current_revision()) ? ListChangesOption.CURRENT_REVISION : ListChangesOption.ALL_REVISIONS, 
<|del|> 
<|del|> 
 info.state = e.getProject().getState().toString(); 
 doQuery(); 
 if (!config.getProject().getNameKey().equals(allProjects.get()) && !config.getProject().getParent(allProjects.get()).equals(parentProjectName)) { 
 allPushTaksCompleted = finishedPushTasksCount == totalPushTasksCount; 
 private boolean showIndirectAncestors; private boolean showMergedBranches; 
 @Nullable public Boolean getIfPresent(ConflictKey key); 
 public final String project; public final String ref; public final String targetNode; public final String status; 
 private void parseCommits(final Collection<Ref> refs) throws IOException { if (commitToRef != null) { return; } commitToRef = LinkedListMultimap.create(); 
 --active; start(); 
 * @param <T> type of object the predicate can evaluate in memory. 
 @SuppressWarnings("deprecation") 
<|del|> 
 } catch (Exception e) { Throwables.propagateIfPossible(e); 
 this(user, psid, null); } public RevisionEdit(IdentifiedUser user, PatchSet.Id psid, Ref ref) { Preconditions.checkArgument(psid.isEdit()); 
 String password = secureStore.get("database", null, "password"); 
 Preconditions.checkNotNull(stream); 
 } } 
 "The config parameter '%s' of plugin '%s' does not exist.", v.getKey(), pluginName)); 
 private static final Logger log = LoggerFactory 
<|del|> 
 private static Policy loadPolicy(SitePaths sitePaths, Config cfg) 
public class BlameServlet extends BaseServlet { 
 "Destination branch cannot be null or empty"); 
 DynamicItem<SecureStore> secureStoreItem) { 
 int n = start + changes.length(); next.setTargetHistoryToken(anchorPrefix + "," + n); 
 private boolean diffChange; 
 PluginInfo info = toPluginInfo(p); 
 static List<PluginDescriptor> sort(Map<String, File> activePlugins) { 
 httpInjector = null; sshInjector = null; sysInjector = null; 
 throw die("remote plugin administration is disabled"); 
@RequiresCapability(GlobalCapability.ADMINISTRATE_SERVER, scope = CapabilityScope.CORE) @CommandMetaData(name = "degrade", description = "Enable DEGRADED mode") 
 public void createBranch() throws GitAPIException, IOException, RestApiException { 
<|del|> 
 @EmailReviewCommentsExecutor final Executor executor, 
 short dv = lv.info.defaultValue(); info("default value is: "+String.valueOf(dv)); if ((self != null && v == self.value()) || (self == null && v == dv)) { 
<|del|> 
 UniversalServerPluginProvider(DynamicSet<ServerPluginProvider> sf) { 
import com.google.gerrit.extensions.restapi.UnprocessableEntityException; 
 public SecureStore get() { 
 value = perm.test(new LabelPermission(lt)) ? 0 : null; 
 public CreateChange post(TopLevelResource parent) throws RestApiException { 
<|del|> 
<|del|> 
<|del|> 
 assertEquals(CONTEXT + "/plugins/" + PLUGIN_NAME + "/" + RESOURCE, 
 @Inject private PatchListCache patchListCache; 
 /** Return the minimum value of this predicate's range, inclusive. */ 
@RequiresCapability(GlobalCapability.VIEW_CACHES) @Singleton 
 throw new BadRequestException("unsupported format: " + format); 
 "%s?client_id=%s&redirect_uri=%s&state=%s%s", config.gitHubOAuthUrl, config.gitHubClientId, getURLEncoded(config.oAuthFinalRedirectUrl), 
 modules.add(new RestCacheAdminModule()); 
 JarPluginProvider(SitePaths sitePaths) { 
 log.error("[" + submissionId + "]" + msg); 
 @Inject private DynamicSet<PreUploadHook> preUploadHooks; @Inject 
 private static String trimTrailingSlash(String url) { return CharMatcher.is('/').trimTrailingFrom(url); 
<|del|> 
 return getReviewCategoryStrategy() != ReviewCategoryStrategy.NONE; 
 Provider<GetDiff> getDiff, 
 } }; 
// limitations under the License. 
 private static class UsageDataEvent implements Event { 
 StringBuilder manifestString = new StringBuilder("PluginName: " + pluginName + "\n" 
 + " RevId{" + commit.name() + "} and " + ps.getRevision().get()); 
 sysModuleClassName = scriptClassName;; 
 private static Account.Id parseIdent(PersonIdent ident, Change.Id changeId) 
<|del|> 
 /** * Allows dynamically bind something in Guice module. * * Currently it is used for auto registering {@link DynamicSet} elements during * jar plugin scan */ 
<|del|> 
 c.setValue(ent.getValue().value); c.setGranted(timestamp); c.setUrl(ent.getValue().url); c.setVerifier(ent.getValue().verifier); c.setComment(ent.getValue().comment); ups.add(c); 
 } return builder.endObject(); 
 String emailFieldLabel(); 
 private GerritServer(Injector testInjector, Daemon daemon, ExecutorService daemonService) throws IOException, ConfigInvalidException { 
<|del|> 
 private void writeFileAndFireAuditEvent(HttpServletRequest req, HttpServletResponse res) throws IOException { 
 fromJson(CharStreams.toString(r), ReviewInput.class); 
<|del|> 
 setCommentRevId(c, patchListCache, rsrc.getChange(), rsrc.getPatchSet()); 
 * refs/users/UU/UUUU/edit-CCCC. * 
 putPreferred(preferredEmail); 
 throws IOException { 
 if (log.getName().matches(regex)) { 
 private static void setLevelUsingRegex(Level level, String regex) { 
 public void putReviewer(Account.Id reviewer, ReviewerState type) { checkArgument(type != ReviewerState.REMOVED, "invalid ReviewerType"); reviewers.put(reviewer, type); 
 // Edit is wiped out 
<|del|>
 private static final String HASHTAG_FIELD = ChangeField.HASHTAG_CASE_AWARE.getName(); 
<|del|> 
 throw new UnsupportedOperationException(); 
 nameTxtBox.setVisibleLength(VISIBLE_LENGTH); 
public class GetServerConfig implements RestReadView<ConfigResource> { 
 return new PatchSet.Id(id, psIdStr.equals("edit") ? 0 : Integer.parseInt(psIdStr)); 
 String hashtag = hashtagTextBox.getText(); 
 CreateChangeAction.call(createChange, getProjectKey().get()); 
Copyright (C) 2014 The Android Open Source Project 
<|del|> 
 /** Get the contents of a File in a PatchSet or cange edit. */ public static void getContent(PatchSet.Id id, String filename, AsyncCallback<String> cb) { 
 for (Account a : reviewerSuggestionCache.get()) { 
 public Response<ChangeInfo> apply(TopLevelResource parent, ChangeInput input) throws OrmException, IOException, InvalidChangeOperationException, RestApiException, UpdateException { 
 /** {@code get} with {@link ListChangesOption} set to all except CHECK. */ 
 private static class MagicBranchInput { 
/** Allows getting archives for Git repositories over SSH using the Git * upload-archive protocol. */ 
<|del|> 
 public static class BranchWebLink implements WebLink<BranchResource> { 
 changeDataFactory.create(db.get(), rsrc.getControl())); 
 RUN_AS + " disabled by auth.enableRunAs = false"); 
 private class Task implements Callable<Void> { 
 } @Override public Properties getStatistics() { return statistics; } 
 child(CHANGE_KIND, "edit").to(ChangeEdits.class); delete(CHANGE_KIND, "edit").to(DeleteChangeEdit.class); 
<|del|> 
 this.pattern = compiledMatch; 
 // Go through the individual regexps now for replacement. for (CommentLinkInfo cli : operationalCommentLinks) { List<Map<String, String>> resultingReplacement = cli.replace(piece.get("text")); 
<|del|> 
 throw new SubmoduleException("Cannot update gilinks for " + subscriber.get(), e); 
 String text = m.group(0); addLink(parsed, text, pattern.matcher(text).replaceAll(link)); 
 First byte contains "count" 1 bits and a zero bit - the count is 2-4 and denotes the number of bytes followig that is part of that character. 
<|del|> 
 final private int systemMaxBatchChanges; 
 if ((cp >= 'a' && cp <= 'z') || (cp >= 'A' && cp <= 'Z') || (cp >= '0' && cp <= '9')) { 
 * @return The merge results of the merge operation Map<<sha1 of the commit to be merged>, <sha1 of the merge result>> 
<|del|> 
 DynamicItem<WebSession> webSession, GerritAuthFilter gerritAuthFilter, GerritGitBlitContext gerritGitblitContext, SitePaths sitePaths, 
 if (rejectImplicitMerges) { Collections.addAll(mergedParents, c.getParents()); mergedParents.remove(c); } boolean commitAlreadyTracked = !existingRefs.isEmpty(); if (commitAlreadyTracked) { alreadyTracked++; 
<|del|> 
 private static final String PATTERN = "(?:\\s|\\A)#[\\p{L}[0-9]-_]+"; 
 if (isVisibleTo(change, holder.user, db)) { holder.listener.onEvent(event); } 
public class DefaultRealm extends AbstractRealm { 
 String s = statusRaw(); return s != null ? Change.Status.valueOf(s) : null; 
 private static Injector buildInjector(final Injector parent) { // Use DEVELOPMENT mode to allow lazy initialization of the // graph. This avoids touching ancient schema versions that // are behind this installation's current version. 
import com.google.gerrit.extensions.common.FileInfo; import com.google.gerrit.extensions.common.MergeableInfo; import com.google.gerrit.extensions.common.TestSubmitRuleInput; import com.google.gerrit.extensions.restapi.BinaryResult; 
 "(${submitSize} changes including ancestors and their " + "topic related changes. ${numberTopics} different topics altogether)"; 
 private final PatchSetInfoFactory patchSetInfoFactory; private final RebaseChange rebaseChange; private final Map<Change.Id, CodeReviewCommit> newCommits; 
public class RefReplicatedEvent extends RefEvent { 
 if (ref == null) { log.warn("Branch %s doesn't exist", branch); 
 public enum Status { SUBMITTED, MERGED } 
 this.path = patch.get(); this.startLine = startLine - 1; 
 return null != scheme ? getExternalId().substring(scheme.length() + 1) 
 GitHubLogin(OAuthProtocol oauth) { 
<|del|> 
 public void execute() throws UpdateException { 
 log.error(String.format("'%s' is register as preferred email for multiple accounts", email.getEmail())); 
 void loadChangeInfo(boolean firstCall, AsyncCallback<ChangeInfo> cb) { 
 SourceFile navmd = findFile(rw, root, NAVBAR_MD); String reqEtag = req.getHeader(HttpHeaders.IF_NONE_MATCH); String curEtag = etag(srcmd, navmd); if (reqEtag != null && reqEtag.equals(curEtag)) { 
 .closeDiv(); } if (0 < deleted) { sb.openDiv() .setStyleName(R.css().deleted()) .setAttribute("style", "width:" + d + "px") .closeDiv(); } 
<|del|> 
<|del|> 
 return (val.startsWith("https://") || val.startsWith("http://") || val.startsWith("//")) 
Copyright (C) 2015 The Android Open Source Project 
 listeners.put(listener, new EventListenerHolder(listener, user)); 
import com.google.gerrit.reviewdb.client.Branch; import com.google.gerrit.reviewdb.server.ReviewDb; 
 pool.execute(new StoreEventTask((ProjectEvent) event)); 
 return System.identityHashCode(this); 
 public ChangeKind getChangeKind(@Nullable Repository repo, ChangeData cd, PatchSet patch) { return getChangeKindInternal(this, repo, cd, patch); 
 return checkNotNull( accounts.get(username), "No TestAccount created for %s", username); 
 * Remove included groups from this one. 
 return ret; 
 event.change = eventFactory.asChangeAttribute(db, change); event.patchSet = asPatchSetAttribute(change, patchSet, db); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); 
 String targetRef = Constants.R_REFS + name; 
 config.setAvatarSupport(avatarTracker.get().getAvatarSupport()); 
 private final ConsoleUI ui; private final String pluginName; private final Factory sections; private final Config cfg; 
 throw new IllegalStateException("Database access is locked"); 
<|del|> 
 .timestamp(new Date(TimeUtil.nowMs())) 
 List<String> getIncludedIn(String project, String commit, 
 .auth(new HttpHost(uri.getHost(), uri.getPort()), 
 assert_() .withFailureMessage(errorMessage) .that(hook.isFile()).isTrue(); 
 assertThat(result.size()).isGreaterThan(0); r = userSession.delete("/config/server/tasks/" + result.get(0).id); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_NOT_FOUND); 
 String docRoot = cfg.getString("gitiles", null, "docroot"); 
 public void merge(ReviewDb db, ChangeSet changes, IdentifiedUser caller, 
<|del|> 
<|del|> 
 } catch (QueryParseException | OrmException e) { 
 updateSubmoduleSubscriptions(db, branch); 
 return this.getClass().getResourceAsStream(file); 
 log.error(String.format("Cannot resolve ref %s in project %s.", ref, project)); return null; 
 protected void updateSuperProjects(ReviewDb db, Set<Branch.NameKey> updatedBranches) throws SubmoduleException { try { 
 private static String getLinkName() { 
/** Colors modified regions for {@link SideBySide} and {@link Unified}. */ 
 AccountInfo accountInfo = panel.getObject(GerritUiExtensionPoint.Key.ACCOUNT_INFO).cast(); 
 private final Provider<MetaDataUpdate.User> metaDataUpdateFactory; 
<|del|> 
<|del|> 
 throw new ResourceConflictException("Change " + cd.getId() + " is included with revision " + cd.getId() + " / " + cd.change().currentPatchSetId()); 
 * Keys should not be trusted unless checked with {@link PublicKeyChecker}. 
<|del|> 
 return getClass().getSimpleName() + ids(); 
 log.error("Cannot send GPG key added message to " + rsrc.getUser().getAccount().getPreferredEmail(), e); 
 private SetMultimap<String, Branch.NameKey> destinations = HashMultimap.create(); 
 ? wrapBlob(project, path, obj, raw, contentType, suffix) : zipBlob(path, obj, commit, suffix); 
 abstract void onRefReplicatedToOneNode(String project, String ref, URIish uri, RefPushResult status, RemoteRefUpdate.Status refStatus); 
 PaginatedProjectScreen(Project.NameKey toShow) { 
 this.httpProvider = httpClientProvider; 
<|del|> 
 import java.io.File; import java.io.IOException; import java.util.ArrayList; import java.util.List; 
<|del|> 
 if (hashtags != null && hashtags.size() > 0) { 
 HashSet<String> emails = new HashSet<String>(Arrays.asList(TEST_CASES)); 
 private void gatherRevocationProblems(PGPPublicKey key, List<String> problems) { 
 abstract HashCode message(); @Nullable abstract CommentRange range(); 
import static com.google.gerrit.reviewdb.client.Account.FieldName.USER_NAME; 
<|del|> 
<|del|> 
// The above license applies to this file, whereas the below license applies to // ClippyResourcs (line 146) as used herein. // The MIT License (MIT) 
 .review(ReviewInput.approve()); 
 modules.add(new ServerPluginInfoModule(this, env.getMetricsRegistry())); 
 AccountInfo getMerger(); /** Represents the merged Revision when the submit strategy is cherry-pick */ String getNewRevisionId(); 
 * Demonstration of how to add a new Dropwizard Metrics Reporter using 
<|del|> 
 for (GarbageCollectorMXBean gc : ManagementFactory .getGarbageCollectorMXBeans()) { 
 String annotation = Strings.nullToEmpty(reviewer.annotation()); 
 "submitSize", String.valueOf(cs.size()), "numberTopics", String.valueOf(cs.topics().size())); 
 private boolean stopped; 
 private static final Function<StarredChange, Change.Id> STARRED_CHANGE_TO_CHANGE_ID = new Function<StarredChange, Change.Id>() { @Override public Change.Id apply(StarredChange starredChange) { return starredChange.getChangeId(); } }; 
 dropdown.setSelectedIndex(0); } else { // Doc search is NOT available. dropdown = null; 
 protected void configureServlets() { serveRegex(URL_REGEX).with(LfsApiServlet.class); bind(LocalLargeFileRepository.class); 
 String authorLastName = author[author.length - 1]; String shortId = line.id().substring(0, 8); 
 private static String formatLabelValue(short value) { if (value > 0) { return "+" + value; } else { return Short.toString(value); 
 try { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); 
<|del|> 
<|del|> 
 ).redirectError(Redirect.INHERIT).redirectOutput(Redirect.INHERIT) .start().waitFor(); 
 list = patchListCache.get(control.getChange(), patchSet, DiffType.AUTO_MERGE); 
 VersionedAccountPreferences versionedPrefs = VersionedAccountPreferences.forUser(id); 
 final Change.Id changeId = screen.getPatchSetId().getParentKey(); ChangeApi.reviewer(changeId.get(), user).delete( 
 if (repo == null) { 
 throw new ResourceConflictException("group '" + name + "' already exists"); 
 new TypeToken<List<JiraProject>>(){}.getType(), new int[] {HTTP_OK}).data; 
 assertChangeSetMergeable(l.getChange(), true); submit(l.getChangeId()); assertMerged(c.getChangeId()); assertMerged(g.getChangeId()); assertMerged(k.getChangeId()); 
 if (diff && isSymLink(tw.getRawMode(0))) { 
 return automerge(repo, rw, b, mergeStrategy); 
<|del|> 
opyright (C) 2016 The Android Open Source Project 
 public String oldValue; 
<|del|> 
 oldApprovals.put(entry.getKey(), (short) 0); 
 return new QuerySource(indexes, queryBuilder.toQuery(p), opts, getSort()); 
 } BlobBasedConfig bbc = new BlobBasedConfig(null, repo, commit, GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); 
 public static int toParentNumber(int revisionNo) { 
 public static LintLine create(String shortMsg, String msg, String sev, Pos line) { 
<|del|> 
<|del|> 
 newApprovals = new HashMap<>(); oldApprovals = new HashMap<>(); LabelTypes labelTypes = changeCtx.getControl().getLabelTypes(); 
 public static final String CACHE_NAME = "patternCache"; 
 Schema_121(Provider<Schema_120> prior) { 
 boolean reviewingBase = base == null; getDiffTable().setUpBlameIconA(cmA, reviewingBase, reviewingBase ? revision : base, path); getDiffTable().setUpBlameIconB(cmB, revision, path); 
<|del|> 
<|del|> 
 if (parents.length() >= parentNo) { return RevisionInfo.forParent(-parentNo, parents.get(parentNo - 1)); 
 return db.accounts().get(id) != null; 
 public void deleteKey(Account.Id accountId, int seq) 
 r.assertErrorStatus("not Signed-off-by author/committer/uploader in commit message footer"); 
<|del|> 
 PreparedStatement changesForProject = conn.prepareStatement("SELECT change_id FROM changes WHERE dest_project_name = ?"); changesForProject.setString(1, project.getName()); java.sql.ResultSet resultSet = changesForProject.executeQuery(); 
<|del|> 
 public ProjectAccessInfo apply(ProjectResource rsrc) { 
 skips = commentManager.splitSkips(context, skips); renderSkips(context, skips, lineA, lineB); } 
 private CodeMirror cmBase; 
 return Objects.equals(permissions, ((AccessSectionInfo) obj).permissions); 
 ChangeEditApi.get(revision, path, true /* base */, group1.add(new HttpCallback<NativeString>() { 
 PermissionInfo permissionInfo = newPermissionInfo(); permissionInfo.rules.put( 
<|del|> 
<|del|> 
 RevCommit sourceCommit = rw.parseCommit(git.resolve(input.merge)); MergeUtil mergeUtil = mergeUtilFactory .create(rsrc.getControl().getProjectState()); 
 gApi.changes().id(draftResult.getChangeId()).delete(); 
 } else { 
 @Nullable Project.NameKey parent) throws Exception { 
 // source could be any git object references expression 
 public void mergeWithMissingChange() throws Exception { // create a draft change 
 update.skipDeleted : def.skipDeleted; ud.skipUnchanged = update.skipUnchanged != null ? update.skipUnchanged : def.skipUnchanged; 
 GetDiffPreferences(GitRepositoryManager gitManager, AllUsersName allUsersName) { 
 private DiffPreferencesInfo get() throws Exception { RestResponse r = adminRestSession.get("/config/server/preferences.diff"); r.assertOK(); return newGson().fromJson(r.getReader(), DiffPreferencesInfo.class); 
 } 
 ReadmeHelper(ObjectReader reader, GitilesView view, Config cfg, RevTree rootTree) { 
 AccountApi.updateWatchedProject("self", info, new GerritCallback<JsArray<ProjectWatchInfo>>() { 
 "merge.source must be non-empty"); 
 exception.expectMessage( "Cannot create annotated tag \"" + R_TAGS + "test\""); 
 if (tld.startsWith("# ") || tld.startsWith("XN--")) { 
 try { changeNotes.add(create(db, project, id)); } catch (NullPointerException | IllegalArgumentException e){ log.error(e.getMessage()); } 
 r2.assertErrorStatus("cannot place onto patch set 1."); 
<|del|> 
<|del|> 
<|del|> 
Copyright (C) 2014 The Android Open Source Project 
 logError("Missing current patch set on change " + changeId); commits.put(changeId, CodeReviewCommit.noPatchSet(ctl)); 
 throws QueryParseException { if ("self".equals(query)) { return new AccountIdPredicate(self()); 
<|del|> 
 r.assertOkStatus(); gApi.projects() .name(project.get()) .branch("otherBranch") .create(new BranchInput()); PushOneCommit.Result r2 = push.to("refs/for/otherBranch"); r2.assertOkStatus(); 
 } for (Map.Entry<String, Collection<String>> e : notifyValuesByProject.asMap() .entrySet()) { cfg.setStringList(PROJECT, e.getKey(), KEY_NOTIFY, new ArrayList<>(e.getValue())); } 
import org.junit.Test; import org.junit.runner.RunWith; 
 // TODO(logan): return error to client // return fail(input.reviewer, "...") 
 Map<String, ApprovalInfo> getOldApprovals(); Map<String, ApprovalInfo> getApprovals(); Map<String, ApprovalInfo> getRemoved(); NotifyHandling getNotify(); 
 public abstract ImmutableSet<NotifyType> notifyTypes(); 
 String uriStr = uri.toString(); if (uri.getHost() != null && uriStr.startsWith(GERRIT_ADMIN_PROTOCOL_PREFIX)) { return new URIish(uriStr.substring(0, GERRIT_ADMIN_PROTOCOL_PREFIX.length())); 
<|del|> 
 protected LargeFileRepository getLargeFileRepository( LfsRequest request, String path) { 
 log.debug( String.format("Plugin %s did not define its top-level command", plugin.getName()), err); 
 bind(new TypeLiteral<ImmutableSet<GroupReference>>() {}) 
 @Test 
 ObjectId commit = createCommit(me, inserter, prevEdit, newTree, project, now); 
<|del|> 
 if (info.showJobsSummaryPanel()) { Plugin.get().panel( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new JobsSummaryPanel.Factory()); } 
 // Only accept requests for projects where LFS is enabled. // No config means we default to "not enabled". if (config != null && config.getEnabled()) { 
 private Op(ChangeControl control, String msgTxt, NotifyHandling notifyHandling) { this.control = control; 
 public boolean getWriteJson() { 
 private void buildNoteJson(ChangeNoteUtil noteUtil, OutputStream out) throws IOException { 
 private BinaryResult reject(final String message) { return BinaryResult.create(message + "\n"); 
<|del|> 
 ArrayList<LfsConfigSection> result = new ArrayList<>(namespaces.size()); 
 IdentifiedUser user = self.get().asIdentifiedUser(); 
 public final native void lineWrapping(boolean w) /*-{ this.line_wrapping = m }-*/; 
 .toInstance(testConfig); 
 Account oldAssignee = null; if (oldAssigneeId != null) { oldAssignee = accountInfosFactory.create().get(oldAssigneeId); 
 StarredChangesUtil.StarField starField = StarredChangesUtil.StarField.parse(r.stringValue()); 
 Account account = accountInfo.create().get(assignee.get()); return Response.ok(AccountJson.toAccountInfo(account)); 
<|del|> 
 * Invoked by Gerrit before the assignee of a change is modified. 
 * @param candidates A list of candidates for the ranking. 
 assertThat(notes.getChange().getAssignee().get()) .isEqualTo(changeOwner.getAccountId()); 
 static final String OPEN_CHANGES = "open_changes"; static final String CLOSED_CHANGES = "closed_changes"; 
 private final ChangeMapping mapping; 
 public void requestDefaultSuggestions(Request req, Callback cb) { 
 public void voteOnBehalfOfWithCommentWritingJson() throws Exception { assume().that(notesMigration.readChanges()).isTrue(); 
 throw new AuthException("cannot add patch set"); 
 log.error("Exception while suggesting reviewers", e); 
 } else if (input.destination == null || input.destination.trim().isEmpty()) { 
 serve(defRepository.getServletUrlPattern()) .with(new LfsFsContentServlet(defRepository)); 
 private final Change.Status status; 
 loginListener.onLogin(currentUser.asIdentifiedUser(), httpRequest, wrappedResponse); 
 public IncludedIn.IncludedInInfo apply(ChangeResource rsrc) throws RestApiException, OrmException, IOException { 
public class FilenameComparator implements Comparator<String> { public static final FilenameComparator INSTANCE = new FilenameComparator(); 
 "\nrefName: " + refName); } else if (REFS_CONFIG.equals(refName)) { 
 BuildSystem.Label label = new BuildSystem.Label(pkg, String.format("__gwt_binary_%s__", target), target + ".zip"); 
<|del|> 
 private static final int MAX_CONFLICT_MESSAGE_LENGTH = 10000; 
<|del|> 
 @Override public void start() { 
<|del|> 
 * Take a string of comment text that was written using the wiki-Like format 
<|del|> 
 private Module loadModule(String className) { Module libModule = null; 
Copyright (C) 2016 The Android Open Source Project 
 for (String p : source.split("\n\n")) { 
<|del|> 
 return "SELECT 1 FROM SYSIBM.SYSDUMMY1"; 
import java.util.List; 
 try { 
 @GerritConfig(name = "notedb.writeJson", value = "true") 
 public final native VotingRangeInfo permittedVotingRange() /*-{ return this.permitted_voting_range; }-*/; 
 changeMsg += "\n\n" + numComments(parsedComments.size()); 
/** * View of the draft comments for a single {@link Change} based on the log of * its drafts branch. */ 
 }); } 
 private final Map<String, Map<String, ?>> config; 
 private static final Logger log = LoggerFactory.getLogger(MessageOfTheDayImpl.class); 
 .collect(toList())); accountCache.evict(accountId); return Response.none(); 
 this.rejectNoMsgBody = config.getBoolean(COMMIT_MESSAGE_SECTION, REJECT_NO_MSG_BODY_KEY, DEFAULT_REJECT_NO_MSG_BODY); 
 private static Term idTerm(AccountGroup group) { return idTerm(group.getGroupUUID()); 
 new SiteInitializer(path, getProperty(fc, "gerrit.init_path"), new UnzippedDistribution(servletContext), pluginsToInstall).init(); 
 cipher.doFinal(String.format("%s-%s-%s", operation, id.name(), timeout(expirationSeconds)) .getBytes(StandardCharsets.UTF_8)))); 
 public static ExternalId create(String scheme, String id, Account.Id accountId) { return new AutoValue_ExternalId(Key.create(scheme, id), accountId, null, null, null); 
 return false; // Branch-specific behavior: ref is not matching 
 private static boolean match(String refName, String refPattern) { 
 public String authenticate(CurrentUser user, List<String> args) 
 req.getHeader(HDR_AUTHORIZATION)); 
 } catch (ResourceConflictException e) { assertThat(e.getMessage()).isEqualTo("3rd change won't be merged"); 
 ObjectReader objectReader, Map<String, ReceiveCommand> commands) throws IntegrationException { 
 String[] refPatterns = pluginConfig.getStringList("branch"); 
import org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet; import org.eclipse.jgit.lfs.server.LfsObject; 
 if (isActive(cfg) && validatorConfig.isEnabledForRef( 
 * @return {@code true}, if Gerrit should discard the message, {@code false} otherwise. 
<|del|> 
 ReviewDb db = ReviewDbUtil.unwrapDb(dbProvider.get()); Change change = rsrc.getRevisionResource().getChange(); if (PrimaryStorage.of(change).equals(PrimaryStorage.REVIEW_DB)) { 
 && (activeForRef(conf, refName)) 
import com.google.inject.Inject; 
 public final native boolean isTrusted() 
<|del|> 
 static class Processor extends LfsAuthToken.Processor<LfsFsAuthToken> { 
 helper.add("approval", psa); 
<|del|> 
opyright (C) 2017 The Android Open Source Project 
 private Map<String, Comment> scanDraftComments(ChangeControl ctrl, 
 // Check that admin has received both HTML and plaintext content 
<|del|> 
 private ObjectId redoCommits( 
 } // This naming scheme cannot produce directory/file conflicts // as no projects contains ".git/": aos.putArchiveEntry(f.prepareArchiveEntry(p.get() + ".git")); bw.writeBundle(NullProgressMonitor.INSTANCE, aos); aos.closeArchiveEntry(); 
 return input.change().isPrivate() ? "1" : "0"; 
<|del|> 
<|del|> 
<|del|> 
 if (cc.hasExplicitRange(name) || self.get().getCapabilities().canAdministrateServer()) { 
 public ManiphestUpdate maniphestUpdate(int taskId, String comment, Iterable<String> projects, String action) throws ConduitException { 
<|del|> 
 "query/cla_check_count", new Description("Total number of CLA check requests").setRate().setUnit("requests")); 
 throw new ConfigInvalidException("Automerger config branch pair malformed: " + subsection); 
<|del|> 
 && (canMaintainServer || ctl.isVisible(db))) { 
 public void shouldCreateSharedDirectoryIfItDoesNotExist() 
<|del|> 
 new TypeToken<List<JiraProject>>(){}.getType(), new int[] {HTTP_OK}).data; 
Copyright (C) 2017 The Android Open Source Project 
 checkArgument(!db.changesTablesEnabled(), "expected Change tables to be disabled on %s", db); 
 if (executor != null) { 
 if (! providesDynamicOptions(plugin)) { log.warn( String.format("Plugin %s did not define its top-level command", plugin.getName()), err); } 
 Future<IntraLineDiff> result = diffExecutor.submit( () -> IntraLineLoader.compute(args.aText(), args.bText(), args.edits())); 
 public static final FooterKey FOOTER_WORK_IN_PROGRESS = new FooterKey("Work-in-progress"); 
 } else { plugins = plugins.stream().filter(p -> p.endsWith(".js")).collect(Collectors.toList()); 
 try (InputStream in = ol.openStream()) { if (RawText.isBinary(in)) { continue; } 
 protected final String name; protected final String value; 
 HTTP, EnumSet.of(HTTP, HTTP_LDAP, LDAP)); 
 DynamicSet<AccountIndexedListener> indexedListener, @Assisted AccountIndexCollection indexes) { 
 * @param name index name * @return true if index was activated, otherwise false. 
 return EntityUtils.toString(entity); 
 * @param up the UploadPack instance being processed 
<|del|> 
<|del|> 
 String uriStr = uri.toString(); if (uri.getHost() != null && uriStr.startsWith(GERRIT_ADMIN_PROTOCOL_PREFIX)) { return new URIish(uriStr.substring(0, GERRIT_ADMIN_PROTOCOL_PREFIX.length())); 
<|del|> 
 } catch (IOException | UpdateException | InvalidChangeOperationException | OrmException e) { 
 assertQuery(q, change); assertQuery("commit:" + q, change); 
 return person == null 
 public void projectChangeNumberReturnsChange() throws Exception { 
 String.class.isAssignableFrom((Class<?>) types[0]), 
 comments = ImmutableList.of(); 
 to.range = from.range; to.unresolved = from.unresolved; 
 protected void run() throws AuthException, PermissionBackendException { // Explicitly check that current user was granted plugin's own capability, 
public class Schema_151 extends SchemaVersion { @VisibleForTesting static final Instant AUDIT_CREATION_INSTANT = LocalDateTime.of(2009, Month.JUNE, 8, 19, 31).toInstant(ZoneOffset.UTC); 
 /** * Index schema for projects. */ 
 } else if (refEvent.command.getType().equals(ReceiveCommand.Type.DELETE)) { 
<|del|> 
<|del|> 
 // User accessed Gerrit with /1234, so we have no project yet. // TODO Replace with a preflight request to obtain project before we deprecate the // numeric change id toGerrit(PageLinks.toChange(null, id), req, rsp); 
 setNotesMigrationState(NotesMigrationState.NOTE_DB_UNFUSED); 
<|del|> 
<|del|> 
 throws IOException { 
 bu.addOp(id, new ImplicitIntegrateOp(args, c)); 
 public ChangeLink(Project.NameKey project, Change.Id c, String text) { 
 * may be set to 0. However, admins may still choose to use a gap, for example to make it easier * to distinguish changes that were created before and after the NoteDb migration. 
 createBranch(new Branch.NameKey(project, "foo")); 
 Pop3MailReceiver(EmailSettings mailSettings, MailProcessor mailProcessor, 
 static void call(Button b, Project.NameKey project) { 
 // channel communication caused an error. Can't do much about it. 
<|del|> 
 if (allowDrafts) { // Drafts can only be deleted if the server has drafts enabled. return true; } // If drafts are disabled, only administrators may delete. 
 ins.setPrivate(input.isPrivate == null ? privateByDefault : input.isPrivate); 
 private ProjectControl createProjectControl(Project.NameKey projectName) throws IOException, ResourceNotFoundException { 
<|del|> 
<|del|> 
 String email = null, name = null, login = null; 
 byte[] buf = new byte[20]; 
 throws AuthException, IOException { 
 return reviewersUtil.suggestReviewers( null, this, rsrc.getProjectState(), getVisibility(rsrc), true); 
 // Perform permission checks 
 private Path sharedDir; 
 .user(rsrc.getUser()) .project(rsrc.getNameKey()) 
<|del|> 
<|del|> 
 * cannot be located, is unable to be activated or deactivated, or is inactive, or cannot be 
<|del|> 
 assertThat(notes.getApprovals()) 
 private final DynamicItem<ProjectNameLockManager> lockManager; 
 * @param db {@link ReviewDb} instance * @param orm {@link MergeOpRepoManager} that should be used to access repositories 
 this.remote = remote; // postpone creation of HttpSession so that it is obtained only when processor // returns content // note that subsequent calls to session.get() (repeated for recoverable failure) // return the same HttpSession instance (memoize). 
 throws URISyntaxException { String cdnPath = cfg.getString("gerrit", null, "cdnPath"); return new IndexServlet(canonicalUrl, cdnPath); 
Copyright (C) 2012 The Android Open Source Project 
 * @param allUsersRepo All-Users repository. * @param metaDataUpdateFactory Factory to create a {@link MetaDataUpdate}, required for updating * the group owner. Can be {@code null} if the group owner is read-only. 
 // consume one account ID to ensure that the group sequence is initialized in NoteDb 
 * Get a single raw document from the index. 
<|del|> 
 log.atInfo().log( "Channel %s successfully joined jgroups cluster %s", channel.getName(), jgroupsConfig.clusterName()); 
/** Holds code for reading and writing internal group data for a single group to/from NoteDB. * * <p>TODO(aliceks): expand docs. */ 
 static String GERRIT_GROUPING = "(\\w+)~(.+)~I([0-9a-f]{40})" //change id triplet 
 md.setMessage(COMMIT_MSG); config.commit(md); } catch (IOException | ConfigInvalidException e) { throw new OrmException("Failed to grant read permissions on group branches", e); } } 
<|del|> 
 } else if (lostEventCount % 10 == 0) { LOGGER.error("Even queue is full, lost {} event(s)", lostEventCount); 
 groupIncludeCache.getGroupsWithMember(user.getId()); 
 this.email = email != null ? email.trim() : null; 
 index.delete(uuid); // The UUID here is read from group name notes. If it fails to load from group // cache, there exists an inconsistency. GroupsNoteDbConsistencyChecker.logFailToLoadFromGroupRefAsWarning(uuid); 
 * Annotation tagged on a field of an ssh command to indicate the value must be hidden from logs. 
 public void groupNameNoteIsMissing() throws Exception { updateGroupNamesRef("g-2", "[group]\n\tuuid = uuid-2\n\tname = g-2\n"); 
 boolean hasGracePermits() { if (gracePermits.get() <= 0) return false; 
 Throwables.throwIfUnchecked(t); 
 .collect(toMap(Map.Entry::getKey, Map.Entry::getValue)); 
 ObjectId noteDataId = noteMap.get(noteId); byte[] raw = readNoteData(rw, noteDataId); ExternalId extId = ExternalId.parse(noteId.name(), raw, noteDataId); 
 * Recursively enumerate the members of the given group. The project should be specified so the 
 log.debug("Executing action {} on issue {}", actionName, issueKey); 
 public Config save(Map<ProjectWatchKey, Set<NotifyType>> projectWatches) { this.projectWatches = ImmutableMap.copyOf(projectWatches); 
 assertThat(u.controlForRef("refs/heads/master").canForceEditTopicName()) 
 * <p>If the preference is omitted in the config file, then the default value for the preference is * used. 
<|del|> 
 // PermissionBackendCondition needs to contact PermissionBackend so trivial evaluation is not 
 locks .getLocks() .stream() .collect( Collectors.groupingBy( (in) -> { return in.owner.name.equals(user.getUserName().get()); })); 
<|del|> 
 //$FALL-THROUGH$ 
 assertCanVote(-1, range); assertCanVote(1, range); 
 public static class Builder { public LfsDateTime build() { return new LfsDateTime(); } 
<|del|> 
<|del|> 
<|del|> 
 && !IndexCollection.class.isAssignableFrom(type)) { 
Copyright (C) 2018 The Android Open Source Project 
Copyright (C) 2018 The Android Open Source Project 
 ".*@example.com.*", "testing.com", "tester@testing.com", ".*google.com", "tester@gerrit.*" 
 public String getJiraUrl() { return CharMatcher.is('/').trimFrom(jiraUrl) + "/"; 
 foundOk = true; break; 
 Map<String, String> properties = ImmutableMap.of(PROJECT_KEY, TEST_PROJECT); 
 .logErrors(true) 
 * Java implementation of Gerrit's default pre-submit rules behavior: check if the labels have the 
 public void changeToIndexDoesNotExist() throws Exception { 
 .collect(toImmutableList()); 
<|del|> 
 URL url = new URL(CharMatcher.is('/').trimFrom(jiraUrl) + "/"); new JiraRestApi<>(url, jiraUsername, jiraPassword, JiraServerInfo.class, "/serverInfo/") .ping(); 
 throws ResourceNotFoundException, ResourceConflictException, IOException, 
 private final EventsLogCleaner eventsLogCleaner; 
 .orElseThrow(() -> new IllegalStateException("no name for " + refPermission)); 
 public final String section; public final String subsection; public final String name; 
 return KeyPair.genKeyPair(jsch, KeyPair.ECDSA, 256); 
 fail("did not get ResourceConflictException"); 
 MEMORY, PERSISTENT 
 log.warn("Cannot invalidate cache {}", name, e); 
/** Cache of project defined ITS rules */ public interface ItsRulesProjectCache { 
 PreparedStatement changesForProject = conn.prepareStatement("SELECT change_id FROM changes WHERE dest_project_name = ?"); changesForProject.setString(1, project.getName()); java.sql.ResultSet resultSet = changesForProject.executeQuery(); 
 url = new URL("http://jira.mycompany.com/myroot/"); 
 implements ChangeIndexedListener, AccountIndexedListener, GroupIndexedListener { 
 private final EncryptionConfig config; 
<|del|> 
<|del|> 
 AnyObjectId commit, AnyObjectId otherCommit, SubmitType submitType, boolean contentMerge) { return new AutoValue_ConflictKey(commit.copy(), otherCommit.copy(), submitType, contentMerge); 
 assertThat(Files.exists(path)).named(site.site_path.getFileName() + " exists").isFalse(); 
 builder.startObject(type.toString()).field(name, text).endObject(); 
 if (retryCount >= maxTries) { 
 Project.NameKey projectName = receiveEvent.getProjectNameKey(); ItsConfig.setCurrentProjectName(projectName); 
 if (!rsrc.getControl().isOwner() 
 assertFalse(itsConfig.getItsProjectName(new Project.NameKey("testProject")).isPresent()); 
<|del|> 
 public static String createNewChangeMessage(String deletedBy) { checkNotNull(deletedBy, "user name must not be null"); 
 * {@code refs/meta/config} of the current project and all of its parents. 
 /** @return true if the user is allowed to remove this reviewer. */ public boolean testRemoveReviewer( 
 .currentUser() 
Copyright (C) 2018 The Android Open Source Project 
 logger.atFiner().log("getDescription db key = %s", db.key); 
 elapsedNanos / 1000000L, (count * 1000L) / (elapsedNanos / 1000000L), 
 private void validateNewCommits(Branch.NameKey branch, ReceiveCommand cmd) 
<|del|> 
<|del|> 
 public static class Entry<T> { private final String pluginName; private final Provider<T> provider; 
 public static final String INVALID_URL_MSG = "******* Invalid URL *******"; 
<|del|> 
 throw new IOException("Response doesn't contain uid field"); 
 return Optional.of(url); 
 public PublicKeyStore(Repository repo, @Nullable SubkeyToMasterKeyCache subkeyCache) { 
 public interface CheckedExtensionImplFunction<T, R, X extends Exception> { 
<|del|> 
 // Contributor agreements configured with excludeProjects = ExcludedProject // in AbstractDaemonTest.configureContributorAgreement(...) 
 if (config.ignoreWip() && (c.workInProgress != null && c.workInProgress)) { 
 writeDefaultAllProjectsConfig("[receive]", "requireChangeId = false"); 
 getConsoleUI().message(" reindex " + reindexArgs.stream().collect(joining(" "))); 
<|del|> 
 public QuotaResponse.Aggregated requestTokens(String quotaGroup, long numTokens) { return DefaultQuotaBackend.request( quotaEnforcers, quotaGroup, requestContext, numTokens, true); 
 "Cache pattern (optional); manually multiply this line to configure more patterns", 
 Multimap<Destination, URIish> getURIs( Optional<String> remoteName, NameKey projectName, FilterType filterType); 
 private final GitRepositoryManager repoManager; private final AllProjectsName allProjectsName; private final SchemaCreator schemaCreator; 
<|del|> 
 protected LabelFunction function; 
 destinationBranch, 
 if (!isChangeRef(changeKey) || (isOpen(openChangesRefs, changeKey) && !isChangeMetaRef(changeKey))) { 
 protected ForwardedIndexingHandler(Configuration.Index indexConfig) { idLocks = Striped.lock(indexConfig.numStripedLocks()); 
 return peerInfo.isPresent() ? ImmutableSet.of(peerInfo.get()) : ImmutableSet.of(); 
import static java.net.HttpURLConnection.HTTP_CREATED; import static java.net.HttpURLConnection.HTTP_FORBIDDEN; import static java.net.HttpURLConnection.HTTP_NOT_FOUND; import static java.net.HttpURLConnection.HTTP_NO_CONTENT; import static java.net.HttpURLConnection.HTTP_OK; 
 * @throws IllegalArgumentException in case no change is found 
 "Only rebuild these changes, do no other migration; incompatible with --project and" + " --skip-project; recommended for debugging only") 
 String ignoreFileRegEx; String[] ignoredUsers; 
<|del|> 
 public void createChangeOnAnInvisibleExistingBranchNotPermitted() throws Exception { createBranch(new Branch.NameKey(project, "foo")); block("refs/heads/*", READ, REGISTERED_USERS); 
 "'onlyextensions' operator is not supported by change index version"); 
 AccountState accountState = accountCache.get(userProvider.get().getAccountId()).get(); gitRefUpdated.fire(project, update, accountState); 
 && showBranch.isEmpty() 
 }); 
 /** At least one required check failed; other checks may have passed, or still be running. */ 
 DeleteChangeTask task = new DeleteChangeTask(id, new IndexEvent()); 
/** A CacheSerializer for Protobuf messages. */ 
 private Optional<CheckerUuid> checkerUuid; 
 CALeGattCharacteristicChangedCallback(gatt, characteristic, characteristic.getValue()); 
 m_context = ctx; m_observer = new ArrayList<FileObserver>(); 
/// @brief This class is OnPutListener for Belkinplug. 
 * * @param resource - URI of resource. 
 * * @param resource - resource pointer of the group resource * @param actionSet - pointer of ActionSet * 
 * * @param resource - collection resource for subscribing presence of all 
 public OCStackResult leaveGroup(String collectionResourceType, 
 * String host = foundResources.getHost(); * 
 private native static void caIpStateDisabled(); 
 private native static void caLeGattServerCharacteristicWriteRequestCallback( 
 private static String TAG = "Sample_Service : CaLeClientInterface"; 
 public Activity getActivity() { return mActivity; } 
 public void setDiscoverable(boolean isDiscoverable) { m_discovervableFlag = isDiscoverable; 
 Log.i(LOG_TAG, "setAttribute (double) called "); 
 public void provisionAclListener(List<ProvisionResult> provisionResultList, 
 public void setResources(List<String> resources) { 
<|del|> 
 try { dispose(); } finally { super.finalize(); } 
 private native static NdefMessage caNativeNfcCreateNdefMessage(byte[] sendData); private native static boolean caNativeNfcInvokeBeam(); 
<|del|> 
 CaInterface.initCheckForConnectionManager(); CaInterface.caManagerSetAutoConnectionDeviceInfo(address); 
 private Button btButton; private Button leButton; 
 PlatformConfig cfg = new PlatformConfig(mActivity, mContext, ServiceType.IN_PROC, type, Common.IP_ADDRESS, Common.IP_PORT, qos); 
<|del|> 
<|del|> 
 ES_CLOUD_ENROLLEE_FOUND(1), 
<|del|> 
 public Boolean updateRecord(String tableName, Document condition, Document record) { 
 public boolean deleteGroup(String gmid, String gid) { 
 boolean policy = true; // provider controls the acceptance of consumers mProviderProxy.Start(policy); 
 public static final String CERT_URI = "cert"; 
 * @expected Should not occur any exception. 
 assertEquals(resp.getStatus(), ResponseStatus.CONTENT); assertTrue(checkResponsePayload(resp, Constants.RESP_INVITE)); assertTrue(checkInviteInfo(resp.getPayload(), Constants.RESP_INVITE, TEST_GROUP_ID, TEST_INVITED_USER)); 
<|del|> 
 notifiyBtyePayload)); 
 HashSet<String> diListSet = new HashSet<>( 
<|del|> 
 public static final String PLATFORM_SUPPORT_LINK = "Support Link"; 
 * @throws OcException if failure 
<|del|> 
 * @throws OcException If bluetooth pairing has not been initialized. * Check that startBtPairingService has been called. 
 */ @Deprecated 
<|del|> 
 * connectivityType, OC::ResourceHandles& resourceHandles, * DeleteResourceCallback callback) 
<|del|> 
 String authToken = htmlbody.substring(htmlbody.indexOf("<a href=") + 1, 
 ActivityInfo info = CrUtils.getRunningActivityInfo(context); 
 Thread.sleep(1000); 
 PreferenceCategory pointerSettingsCategory = (PreferenceCategory) 
 private boolean mManualSafeMediaVolume; 
<|del|> 
<|del|>
 mTextPrimaryColor = context.getResources().getColor(com.andrew.apollo.R.color.sliding_tabs_text_color); //context.getTheme().resolveAttribute(R.attr.textColorPrimary, outValue, true); //mTextPrimaryColor = outValue.data; 
 if (!res.getBoolean(R.bool.config_show_homeWake)) { 
<|del|>
 ContentResolver resolver = mContext.getContentResolver(); mFingerprintWakeUnlock = Settings.System.getIntForUser(resolver, Settings.System.FINGERPRINT_WAKE_UNLOCK, 0, UserHandle.USER_CURRENT) != 0; 
<|del|> 
<|del|> 
 LogUtil.v("ProximitySensor.updateProximitySensorMode", "Proximity sensor is disabled by user!"); 
 == Configuration.UI_MODE_NIGHT_YES;*/ 
 && (mAllowGestureDetection || action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP)) { 
<|del|> 
 public boolean deleteHsia(AccessSubscriberId subscriberId); 
<|del|> 
 public CapellaNavigatorLabelProvider(TransactionalEditingDomain editingDomain, AdapterFactory adapterFact) { super(editingDomain, adapterFact); 
 /** * {@inheritDoc} */ 
 public static ImageDescriptor getImageDescriptor(String key) { return AbstractUIPlugin.imageDescriptorFromPlugin(getPluginId(), key); 
 public boolean covers(IDifference difference) { if (difference instanceof IElementRelativeDifference) { IElementRelativeDifference diff = (IElementRelativeDifference) difference; 
 * Copyright (c) 2014-2016 Thales Global Services S.A.S. 
<|del|> 
 * Copyright (c) 2017, 2018 Thales Global Services S.A.S. 
 // Don't use colors from odesign in diagram palettes siriusUiPreferenceStore.setDefault(SiriusUIPreferencesKeys.PREF_DISPLAY_VSM_USER_FIXED_COLOR_IN_PALETTE.name(), false); 
 * Copyright (c) 2018, THALES GLOBAL SERVICES. 
 for (FunctionalChain chain : abstractFunction.getInvolvingFunctionalChains()) { allChainStates.addAll(chain.getAvailableInStates()); chainName = chain.eClass().getName(); } 
 private Text fileText; private CapellaNavigatorPatternFilter patternFilter; private GenerationContainerCheckedTreeViewer leftTreeViewer; private GenerationContainerCheckedTreeViewer rightTreeViewer; private Button buttonLoad; private Button buttonSave; 
<|del|> 